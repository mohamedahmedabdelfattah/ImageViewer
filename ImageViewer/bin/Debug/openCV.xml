<?xml version="1.0"?>
<doc>
    <assembly>
        <name>openCV</name>
    </assembly>
    <members>
        <member name="F:openCV.cvlib.CV_LOAD_IMAGE_UNCHANGED">
            <summary>
            Left image unchanged
            </summary>
        </member>
        <member name="F:openCV.cvlib.CV_LOAD_IMAGE_GRAYSCALE">
            <summary>
            8 bit, gray
            </summary>
        </member>
        <member name="F:openCV.cvlib.CV_LOAD_IMAGE_COLOR">
            <summary>
            8 bit unless combined with CV_LOAD_IMAGE_ANYDEPTH, color
            </summary>
        </member>
        <member name="F:openCV.cvlib.CV_LOAD_IMAGE_ANYDEPTH">
            <summary>
            any depth, if specified on its own gray
            </summary>
        </member>
        <member name="F:openCV.cvlib.CV_LOAD_IMAGE_ANYCOLOR">
            <summary>
            by itself equivalent to CV_LOAD_IMAGE_UNCHANGED
            but can be modified with CV_LOAD_IMAGE_ANYDEPTH 
            </summary>
        </member>
        <member name="F:openCV.cvlib.CV_MAX_ARR">
            * Increments CvMat data reference counter */
        </member>
        <member name="F:openCV.cvlib.CV_GRAPH_VERTEX">
            * Retrieves index of a graph edge given its pointer */
        </member>
        <member name="F:openCV.cvlib.CV_DIST_USER">
            * get the next edge with the same origin point (counterwise) */
        </member>
        <member name="F:openCV.cvlib.CV_STORAGE_READ">
            * storage flags */
        </member>
        <member name="M:openCV.cvlib.CvCreateImage(openCV.CvSize,System.Int32,System.Int32)">
            <summary>
            Creates header and allocates data
            </summary>
            <param name="size">Image width and height.</param>
            <param name="depth">Bit depth of image elements. Can be one of:
            IPL_DEPTH_8U - uint 8-bit integers
            IPL_DEPTH_8S - signed 8-bit integers
            IPL_DEPTH_16U - uint 16-bit integers
            IPL_DEPTH_16S - signed 16-bit integers
            IPL_DEPTH_32S - signed 32-bit integers
            IPL_DEPTH_32F - single precision floating-point numbers
            IPL_DEPTH_64F - double precision floating-point numbers</param>
            <param name="channels">Number of channels per element(pixel). Can be 1, 2, 3 or 4. The channels are interleaved, for example the usual data layout of a color image is:
            b0 g0 r0 b1 g1 r1 ...
            Although in general IPL image format can store non-interleaved images as well and some of OpenCV can process it, this function can create interleaved images only.</param>
            <returns>IplImage</returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateImageHeader(openCV.CvSize,System.Int32,System.Int32)">
            <summary>
            The function CvCreateImageHeader allocates, initializes, and
            returns the structure IplImage. This call is an analogue of
            iplCreateImageHeader( channels, 0, depth,
            channels == 1 ? "GRAY" : "RGB",
            channels == 1 ? "GRAY" : channels == 3 ? "BGR" :
            channels == 4 ? "BGRA" : "",
            IPL_DATA_ORDER_PIXEL, IPL_ORIGIN_TL, 4,
            size.width, size.height,0,0,0,0);
            though it does not use IPL functions by default
            (see also CV_TURN_ON_IPL_COMPATIBILITY macro)
            </summary>
            <param name="size">Image width and height.</param>
            <param name="depth">Image depth (see CreateImage).</param>
            <param name="channels">Number of channels (see CreateImage).</param>
            <returns>structure IplImage</returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseImageHeader(openCV.IplImage@)">
            <summary>
            The function CvReleaseImageHeader releases the header of a Image.
            </summary>
            <param name="image">ref to the deallocated header.</param>
        </member>
        <member name="M:openCV.cvlib.CvReleaseImage(openCV.IplImage@)">
            <summary>
            Releases header and image data
            The function CvReleaseImage releases the header and 
            the image data. This call is a shortened form of
            if( image.ptr != IntPtr.Zero )
            {
            cvReleaseData( ref image );
            cvReleaseImageHeader( ref image );
            }
            </summary>
            <param name="image">Reference to IplImage</param>
        </member>
        <member name="M:openCV.cvlib.CvInitImageHeader(openCV.IplImage@,openCV.CvSize,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The function cvInitImageHeader initializes the
            image header structure, pointer to which is passed by the user,
            and returns the pointer.
            </summary>
            <param name="image">Image header to initialize.</param>
            <param name="size">Image width and height.</param>
            <param name="depth">Image depth (see CreateImage).</param>
            <param name="channels">Number of channels (see CreateImage).</param>
            <param name="origin">IPL_ORIGIN_TL or IPL_ORIGIN_BL.</param>
            <param name="align">Alignment for image rows, typically 4 or 8 bytes.</param>
            <returns>pointer to passed image</returns>
        </member>
        <member name="M:openCV.cvlib.CvInitImageHeader(openCV.IplImage@,openCV.CvSize,System.Int32,System.Int32)">
            <summary>
            The function cvInitImageHeader initializes the
            image header structure, pointer to which is passed by the user,
            and returns the pointer.
            </summary>
            <param name="image">Image header to initialize.</param>
            <param name="size">Image width and height.</param>
            <param name="depth">Image depth (see CreateImage).</param>
            <param name="channels">Number of channels (see CreateImage).</param>
            <returns>pointer to passed image</returns>
        </member>
        <member name="M:openCV.cvlib.CvCloneImage(openCV.IplImage@)">
            <summary>
            Makes a full copy of image
            </summary>
            <param name="image">ref to IplImage</param>
            <returns>newly allocated image</returns>
        </member>
        <member name="M:openCV.cvlib.CvSetImageCOI(openCV.IplImage@,System.Int32)">
            <summary>
            The function cvSetImageCOI sets the channel of interest
            to a given value. Value 0 means that all channels are
            selected, 1 means that the first channel is selected etc.
            If ROI is NULL and coi != 0, ROI is allocated. Note that
            most of OpenCV functions do not support COI, so to process
            separate image/matrix channel one may copy
            (via cvCopy or cvSplit) the channel to separate
            image/matrix, process it and copy the result back
            (via cvCopy or cvCvtPlaneToPix) if need.
            </summary>
            <param name="image">reference to Image header.</param>
            <param name="coi">The coi.</param>
        </member>
        <member name="M:openCV.cvlib.CvGetImageCOI(openCV.IplImage@)">
            <summary>
            The function cvGetImageCOI returns channel of interest of 
            the image (it returns 0 if all the channels are selected).
            </summary>
            <param name="image">Reference to Image header. </param>
            <returns>channel of interest of the image (it returns 0 if 
            all the channels are selected)</returns>
        </member>
        <member name="M:openCV.cvlib.CvSetImageROI(openCV.IplImage@,openCV.CvRect)">
            <summary>
            The function cvSetImageROI sets the image ROI to a 
            given rectangle. If ROI is NULL and the value of the 
            parameter rect is not equal to the whole image, ROI 
            is allocated. Unlike COI, most of OpenCV functions do 
            support ROI and treat it in a way as it would be a 
            separate image (for example, all the pixel coordinates 
            are counted from top-left or bottom-left (depending on 
            the image origin) corner of ROI)
            </summary>
            <param name="image">Reference to Image header.</param>
            <param name="rect">ROI Rectangle</param>
        </member>
        <member name="M:openCV.cvlib.CvResetImageROI(openCV.IplImage@)">
            <summary>
            The function cvResetImageROI releases image ROI. After 
            that the whole image is considered selected.
            </summary>
            <param name="image">Image header</param>
        </member>
        <member name="M:openCV.cvlib.CvGetImageROI(openCV.IplImage@)">
            <summary>
            The function returns Roi of the channel of interest (coi).
            The rectangle cvRect(0,0,image.width,image.height)
            is returned if there is no ROI
            </summary>
            <param name="image">Image header.</param>
            <returns>Roi as Rectangle</returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateMat(System.Int32,System.Int32,System.Int32)">
            <summary>
            The function cvCreateMat allocates header for the new matrix
            and underlying data, and returns a pointer to the created
            matrix. It is a short form for:
            CvMat mat = cvlib.CvCreateMatHeader( rows, cols, type );
            Matrices are stored row by row. All the rows are aligned by
            4 bytes.
            </summary>
            <param name="rows">Number of rows in the matrix.</param>
            <param name="cols">Number of columns in the matrix.</param>
            <param name="type">Type of the matrix elements. Usually it
            is specified in form CV_bit_depth(S|U|F)Cnumber_of_channels,
            for example: CV_8UC1 means an 8-bit unsigned single-channel
            matrix, CV_32SC2 means a 32-bit signed matrix with two
            channels.</param>
            <returns>Math Structure</returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateMatHeader(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Creates new matrix header
            </summary>
            <param name="rows">N rows.</param>
            <param name="cols">M cols.</param>
            <param name="type">type of Matrix.</param>
            <param name="data">Initializing data or zero.</param>
            <returns>CvMat</returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseMat(openCV.CvMat@)">
            <summary>
            Deallocates matrix 
            </summary>
            <param name="mat">Matrix to deallocate</param>
        </member>
        <member name="M:openCV.cvlib.CvInitMatHeader(openCV.CvMat@,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Initializes matrix header
            </summary>
            <param name="mat">The matrix.</param>
            <param name="rows">N rows.</param>
            <param name="cols">M cols.</param>
            <param name="type">The type of the matrix.</param>
            <param name="data">Data or zero.
            Create a Array with data and use cvtools for creating the IntPtr.
            </param>
            <param name="step">Stepsize.</param>
            <returns>CvMat</returns>
        </member>
        <member name="M:openCV.cvlib.CvCloneMat(openCV.CvMat@)">
            <summary>
            Creates matrix copy 
            </summary>
            <param name="mat">Matrix to clone</param>
            <returns>Cloned Matrix</returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateMatND(System.Int32,System.Int32[],System.Int32)">
            <summary>
            Creates multi-dimensional dense array
            </summary>
            <param name="dims">Number of array dimensions. 
            It must not exceed CV_MAX_DIM (=32 by default, though 
            it may be changed at build time)</param>
            <param name="sizes">Array of dimension sizes.</param>
            <param name="type">Type of array elements. The same as for CvMat.</param>
            <returns>CvMatND</returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateMatNDHeader(System.Int32,System.Int32[],System.Int32)">
            <summary>
            Creates new matrix header
            </summary>
            <param name="dims">Number of dimension.</param>
            <param name="sizes">Array of sizes of the dimensions.</param>
            <param name="type">Type of array elements. The same as for CvMat.</param>
            <returns>CvMatND</returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseMatND(openCV.CvMatND@)">
            <summary>
            Deallocates multi-dimensional array 
            </summary>
            <param name="mat">The Natrix to deallocate</param>
        </member>
        <member name="M:openCV.cvlib.CvInitMatNDHeader(openCV.CvMatND@,System.Int32,System.Int32[],System.Int32,System.IntPtr)">
            <summary>
            Initializes multi-dimensional array header
            </summary>
            <param name="mat">The Matrix.</param>
            <param name="dims">Number of dimensions.</param>
            <param name="sizes">Array of dimension sizes.</param>
            <param name="type">Type of array elements. The same as for CvMat.</param>
            <param name="data">Optional data pointer assigned to the matrix header.
            Create a Array with data and use cvtools for creating the IntPtr.</param>
            <returns>CvMatND</returns>
        </member>
        <member name="M:openCV.cvlib.CvCloneMatND(openCV.CvMatND@)">
            <summary>
            Creates full copy of multi-dimensional array 
            </summary>
            <param name="mat">Array header.</param>
            <returns>CvMatND</returns>
        </member>
        <member name="M:openCV.cvlib.CvDecRefData(openCV.IplImage@)">
            <summary>
            Decrements array data reference counter 
            </summary>
            <param name="arr">Array header.</param>
        </member>
        <member name="M:openCV.cvlib.CvIncRefData(openCV.IplImage@)">
            <summary>
            Increments array data reference counter 
            </summary>
            <param name="arr">Array header.</param>
        </member>
        <member name="M:openCV.cvlib.CvCreateData(openCV.IplImage@)">
            <summary>
            Allocates array data
            </summary>
            <param name="arr">Array header.</param>
        </member>
        <member name="M:openCV.cvlib.CvReleaseData(openCV.IplImage@)">
            <summary>
            Releases array data
            </summary>
            <param name="arr">Array header.</param>
        </member>
        <member name="M:openCV.cvlib.CvSetData(openCV.IplImage@,System.IntPtr,System.Int32)">
            <summary>
            Assigns user data to the array header
            </summary>
            <param name="arr">Array Header.</param>
            <param name="data">The data. Use cvtools to get the IntPtr</param>
            <param name="step">Full row length in bytes.</param>
        </member>
        <member name="M:openCV.cvlib.CvGetRawData(openCV.IplImage@,System.IntPtr@,System.Int32[],openCV.CvSize@)">
            <summary>
            Retrieves low-level information about the array.
            Create managed Arrays of desired size and use cvtools
            to get the IntPtr.
            </summary>
            <param name="arr">Array header.</param>
            <param name="data">Output pointer to the whole image origin or ROI origin if ROI is set.</param>
            <param name="step">Output full row length in bytes.</param>
            <param name="roi_size">Output ROI size.</param>
        </member>
        <member name="M:openCV.cvlib.CvGetRawData(openCV.IplImage@,System.IntPtr@)">
            <summary>
            Retrieves low-level information about the array
            </summary>
            <param name="arr">Array header.</param>
            <param name="data">Output pointer to the whole image origin or ROI origin if ROI is set.</param>
        </member>
        <member name="M:openCV.cvlib.CvGetMat(openCV.IplImage@,openCV.CvMat@,System.IntPtr,System.Int32)">
            <summary>
            Returns matrix header for arbitrary array
            </summary>
            <param name="arr">Input array.</param>
            <param name="header">Pointer to CvMat structure used as a temporary buffer.</param>
            <param name="coi">Optional output parameter for storing COI.</param>
            <param name="allowND">If non-zero, the function accepts multi-dimensional dense arrays (CvMatND*) and returns 2D (if CvMatND has two dimensions) or 1D matrix (when CvMatND has 1 dimension or more than 2 dimensions). The array must be continuous.</param>
            <returns>CvMat</returns>
        </member>
        <member name="M:openCV.cvlib.CvGetMat(openCV.CvMat@,openCV.CvMat@,System.IntPtr,System.Int32)">
            <summary>
            Returns matrix header for arbitrary array
            </summary>
            <param name="arr">Input array.</param>
            <param name="header">Pointer to CvMat structure used as a temporary buffer.</param>
            <param name="coi">Optional output parameter for storing COI.</param>
            <param name="allowND">If non-zero, the function accepts multi-dimensional dense arrays (CvMatND*) and returns 2D (if CvMatND has two dimensions) or 1D matrix (when CvMatND has 1 dimension or more than 2 dimensions). The array must be continuous.</param>
            <returns>CvMat</returns>
        </member>
        <member name="M:openCV.cvlib.CvGetMat(openCV.CvSeq@,openCV.CvMat@,System.IntPtr,System.Int32)">
            <summary>
            Returns matrix header for arbitrary array
            </summary>
            <param name="arr">Input array.</param>
            <param name="header">Pointer to CvMat structure used as a temporary buffer.</param>
            <param name="coi">Optional output parameter for storing COI.</param>
            <param name="allowND">If non-zero, the function accepts multi-dimensional dense arrays (CvMatND*) and returns 2D (if CvMatND has two dimensions) or 1D matrix (when CvMatND has 1 dimension or more than 2 dimensions). The array must be continuous.</param>
            <returns>CvMat</returns>
        </member>
        <member name="M:openCV.cvlib.CvGetImage(openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Returns image header for arbitrary array
            </summary>
            <param name="arr">Input Image.</param>
            <param name="image_header">Pointer to IplImage structure used as a temporary buffer.</param>
            <returns>IplImage</returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateSparseMat(System.Int32,System.Int32[],System.Int32)">
            <summary>
            CreateSparseMat
            </summary>
            <param name="dims">Number of array dimensions. As opposite to the dense matrix, the number of dimensions is practically unlimited (up to 216).</param>
            <param name="sizes">Array of dimension sizes.</param>
            <param name="type">Type of array elements. The same as for CvMat</param>
            <returns>CvSparseMat</returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseSparseMat(openCV.CvSparseMat@)">
            <summary>
            Deallocates sparse array 
            </summary>
            <param name="mat">pointer to the array.</param>
        </member>
        <member name="M:openCV.cvlib.CvCloneSparseMat(openCV.CvSparseMat@)">
            <summary>
            Creates full copy of sparse array 
            </summary>
            <param name="mat">Input array.</param>
            <returns>CvSparseMat</returns>
        </member>
        <member name="M:openCV.cvlib.CvGetSubRect(openCV.IplImage@,openCV.CvMat@,openCV.CvRect)">
            <summary>
            GetSubRect 
            Returns matrix header corresponding to the rectangular sub-array of input image or matrix 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetRow(openCV.IplImage@,openCV.CvMat@,System.Int32)">
            <summary>
            GetRow, GetRows 
            Returns array row or row span 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetCol(openCV.IplImage@,openCV.CvMat@,System.Int32)">
            <summary>
            GetCol, GetCols 
            Returns array column or column span 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetDiag(openCV.IplImage@,openCV.CvMat@,System.Int32)">
            <summary>
            GetDiag 
            Returns one of array diagonals 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetSize(openCV.IplImage@)">
            <summary>
            GetSize 
            Returns size of matrix or image ROI 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvInitSparseMatIterator(openCV.CvSparseMat@,openCV.CvSparseMatIterator@)">
            <summary>
            InitSparseMatIterator 
            Initializes sparse array elements iterator 
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetNextSparseNode(openCV.CvSparseMatIterator@)">
            <summary>
            GetNextSparseNode 
            Initializes sparse array elements iterator 
            </summary>
            <param name="mat_iterator"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetElemType(openCV.IplImage@)">
            <summary>
            GetElemType 
            Returns type of array elements 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetDims(openCV.IplImage@,System.Int32[])">
            <summary>
            GetDims, GetDimSize 
            Return number of array dimensions and their sizes or the size of particular dimension 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPtr1D(openCV.IplImage@,System.Int32,System.Int32@)">
            <summary>
            Ptr*D 
            Return pointer to the particular array element 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGet1D(openCV.IplImage@,System.Int32)">
            <summary>
            Get*D 
            Return the particular array element 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetReal1D(openCV.IplImage@,System.Int32)">
            <summary>
            GetReal*D 
            Return the particular element of single-channel array 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSet1D(openCV.IplImage@,System.Int32,openCV.CvScalar)">
            <summary>
            Set*D 
            Change the particular array element 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetReal1D(openCV.IplImage@,System.Int32,System.Double)">
            <summary>
            SetReal*D 
            Change the particular array element 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvClearND(openCV.IplImage@,System.Int32[])">
            <summary>
            ClearND 
            Clears the particular array element 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCopy(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Copy 
            Copies one array to another 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSet(openCV.IplImage@,openCV.CvScalar,openCV.IplImage@)">
            <summary>
            Set 
            Sets every element of array to given value 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetZero(openCV.IplImage@)">
            <summary>
            SetZero 
            Clears the array 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetIdentity(openCV.IplImage@,openCV.CvScalar)">
            <summary>
            SetIdentity 
            Initializes scaled identity matrix 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRange(openCV.IplImage@,System.Double,System.Double)">
            <summary>
            Range 
            Fills matrix with given range of numbers 
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReshape(openCV.IplImage@,openCV.CvMat@,System.Int32,System.Int32)">
            <summary>
            Reshape 
            Changes shape of matrix/image without copying data 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReshapeMatND(openCV.IplImage@,System.Int32,openCV.IplImage@,System.Int32,System.Int32,System.Int32[])">
            <summary>
            ReshapeMatND 
            Changes shape of multi-dimensional array w/o copying data 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRepeat(openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Repeat 
            Fill destination array with tiled source array 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFlip(openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            Flip 
            Flip a 2D array around vertical, horizontall or both axises 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSplit(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Split 
            Divides multi-channel array into several single-channel arrays or extracts 
            a single channel from the array 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMerge(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Merge 
            Composes multi-channel array from several single-channel arrays or inserts a 
            single channel into the array 
            </summary>
            <param name="src0 src3"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMixChannels(openCV.IplImage@,System.Int32,openCV.IplImage@,System.Int32,System.Int32[],System.Int32)">
            <summary>
            MixChannels 
            Copies several channels from input arrays to 
            certain channels of output arrays 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRandShuffle(openCV.IplImage@,System.UInt64@,System.Double)">
            <summary>
            RandShuffle 
            Randomly shuffles the array elements 
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvLUT(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            LUT 
            Performs look-up table transform of array 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvConvertScale(openCV.IplImage@,openCV.IplImage@,System.Double,System.Double)">
            <summary>
            ConvertScale 
            Converts one array to another with optional linear transformation 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvConvertScaleAbs(openCV.IplImage@,openCV.IplImage@,System.Double,System.Double)">
            <summary>
            ConvertScaleAbs 
            Converts input array elements to 8-bit uint integer another with optional linear transformation 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAdd(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Add 
            Computes per-element sum of two arrays 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAddS(openCV.IplImage@,openCV.CvScalar,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            AddS 
            Computes sum of array and scalar 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAddWeighted(openCV.IplImage@,System.Double,openCV.IplImage@,System.Double,System.Double,openCV.IplImage@)">
            <summary>
            AddWeighted 
            Computes weighted sum of two arrays 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSub(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Sub 
            Computes per-element difference between two arrays 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSubS(openCV.IplImage@,openCV.CvScalar,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            SubS 
            Computes difference between array and scalar 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSubRS(openCV.IplImage@,openCV.CvScalar,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            SubRS 
            Computes difference between scalar and array 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMul(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Double)">
            <summary>
            Mul 
            Calculates per-element product of two arrays 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvDiv(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Double)">
            <summary>
            Div 
            Performs per-element division of two arrays 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAnd(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            And 
            Calculates per-element bit-wise conjunction of two arrays 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAndS(openCV.IplImage@,openCV.CvScalar,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            AndS 
            Calculates per-element bit-wise conjunction of array and scalar 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvOr(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Or 
            Calculates per-element bit-wise disjunction of two arrays 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvOrS(openCV.IplImage@,openCV.CvScalar,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            OrS 
            Calculates per-element bit-wise disjunction of array and scalar 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvXor(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Xor 
            Performs per-element bit-wise exclusive or operation on two arrays 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvXorS(openCV.IplImage@,openCV.CvScalar,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            XorS 
            Performs per-element bit-wise exclusive or operation on array and scalar 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvNot(openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Not 
            Performs per-element bit-wise inversion of array elements 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCmp(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            Cmp 
            Performs per-element comparison of two arrays 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCmpS(openCV.IplImage@,System.Double,openCV.IplImage@,System.Int32)">
            <summary>
            CmpS 
            Performs per-element comparison of array and scalar 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvInRange(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            InRange 
            Checks that array elements lie between elements of two other arrays 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvInRangeS(openCV.IplImage@,openCV.CvScalar,openCV.CvScalar,openCV.IplImage@)">
            <summary>
            InRangeS 
            Checks that array elements lie between two scalars 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMax(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Max 
            Finds per-element maximum of two arrays 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMaxS(openCV.IplImage@,System.Double,openCV.IplImage@)">
            <summary>
            MaxS 
            Finds per-element maximum of array and scalar 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMin(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Min 
            Finds per-element minimum of two arrays 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMinS(openCV.IplImage@,System.Double,openCV.IplImage@)">
            <summary>
            MinS 
            Finds per-element minimum of array and scalar 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAbsDiff(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            AbsDiff 
            Calculates absolute difference between two arrays 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAbsDiffS(openCV.IplImage@,openCV.IplImage@,openCV.CvScalar)">
            <summary>
            AbsDiffS 
            Calculates absolute difference between array and scalar 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCountNonZero(openCV.IplImage@)">
            <summary>
            CountNonZero 
            Counts non-zero array elements 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSum(openCV.IplImage@)">
            <summary>
            Sum 
            Summarizes array elements 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAvg(openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Avg 
            Calculates average (mean) of array elements 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAvgSdv(openCV.IplImage@,openCV.CvScalar@,openCV.CvScalar@,openCV.IplImage@)">
            <summary>
            AvgSdv 
            Calculates average (mean) of array elements 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMinMaxLoc(openCV.IplImage@,System.Double@,System.Double@,openCV.CvPoint@,openCV.CvPoint@,openCV.IplImage@)">
            <summary>
            MinMaxLoc 
            Finds global minimum and maximum in array or subarray 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvNorm(openCV.IplImage@,openCV.IplImage@,System.Int32,System.IntPtr)">
            <summary>
            Norm 
            Calculates absolute array norm, absolute difference norm or relative difference norm 
            </summary>
            <param name="arr1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReduce(openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            Reduce 
            Reduces matrix to a vector 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvDotProduct(openCV.IplImage@,openCV.IplImage@)">
            <summary>
            DotProduct 
            Calculates dot product of two arrays in Euclidian metrics 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvNormalize(openCV.IplImage@,openCV.IplImage@,System.Double,System.Double,System.Int32,openCV.IplImage@)">
            <summary>
            Normalize 
            Normalizes array to a certain norm or value range 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCrossProduct(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            CrossProduct 
            Calculates cross product of two 3D vectors 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvScaleAdd(openCV.IplImage@,openCV.CvScalar,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            ScaleAdd 
            Calculates sum of scaled array and another array 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGEMM(openCV.IplImage@,openCV.IplImage@,System.Double,openCV.IplImage@,System.Double,openCV.IplImage@,System.Int32)">
            <summary>
            GEMM 
            Performs generalized matrix multiplication 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvTransform(openCV.IplImage@,openCV.IplImage@,openCV.CvMat@,openCV.CvMat@)">
            <summary>
            Transform 
            Performs matrix transform of every array element 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPerspectiveTransform(openCV.IplImage@,openCV.IplImage@,openCV.CvMat@)">
            <summary>
            PerspectiveTransform 
            Performs perspective matrix transform of vector array 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMulTransposed(openCV.IplImage@,openCV.IplImage@,System.Int32,openCV.IplImage@)">
            <summary>
            MulTransposed 
            Calculates product of array and transposed array 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvTrace(openCV.IplImage@)">
            <summary>
            Trace 
            Returns trace of matrix 
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvTranspose(openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Transpose 
            Transposes matrix 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvDet(openCV.IplImage@)">
            <summary>
            Det 
            Returns determinant of matrix 
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvInvert(openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            Invert 
            Finds inverse or pseudo-inverse of matrix 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSolve(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            Solve 
            Solves linear system or least-squares problem 
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSVD(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            SVD 
            Performs singular value decomposition of real floating-point matrix 
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSVBkSb(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            SVBkSb 
            Performs singular value back substitution 
            </summary>
            <param name="W"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvEigenVV(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Double)">
            <summary>
            EigenVV 
            Computes eigenvalues and eigenvectors of symmetric matrix 
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcCovarMatrix(openCV.IplImage@,System.Int32,openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            CalcCovarMatrix 
            Calculates covariation matrix of the set of vectors 
            </summary>
            <param name="vects"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMahalanobis(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Mahalonobis 
            Calculates Mahalonobis distance between two vectors 
            </summary>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcPCA(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            CalcPCA 
            Performs Principal Component Analysis of a vector set 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvProjectPCA(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            ProjectPCA 
            Projects vectors to the specified subspace 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvBackProjectPCA(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            BackProjectPCA 
            Reconstructs the original vectors from the projection coefficients 
            </summary>
            <param name="proj"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRound(System.Double)">
            <summary>
            Round, Floor, Ceil 
            Converts floating-point number to integer 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSqrt(System.Single)">
            <summary>
            Sqrt 
            Calculates square root 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvInvSqrt(System.Single)">
            <summary>
            InvSqrt 
            Calculates inverse square root 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCbrt(System.Single)">
            <summary>
            Cbrt 
            Calculates cubic root 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFastArctan(System.Single,System.Single)">
            <summary>
            FastArctan 
            Calculates angle of 2D vector 
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvIsNaN(System.Double)">
            <summary>
            IsNaN 
            Determines if the argument is Not A Number 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvIsInf(System.Double)">
            <summary>
            IsInf 
            Determines if the argument is Infinity 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCartToPolar(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            CartToPolar 
            Calculates magnitude and/or angle of 2d vectors 
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPolarToCart(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            PolarToCart 
            Calculates cartesian coordinates of 2d vectors represented in polar form 
            </summary>
            <param name="magnitude"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPow(openCV.IplImage@,openCV.IplImage@,System.Double)">
            <summary>
            Pow 
            Raises every array element to power 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvExp(openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Exp 
            Calculates exponent of every array element 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvLog(openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Log 
            Calculates natural logarithm of every array element absolute value 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSolveCubic(openCV.CvMat@,openCV.CvMat@)">
            <summary>
            SolveCubic 
            Finds real roots of a cubic equation 
            </summary>
            <param name="coeffs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRNG(System.Int64)">
            <summary>
            RNG 
            Initializes random number generator state 
            </summary>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRandArr(System.UInt64@,openCV.IplImage@,System.Int32,openCV.CvScalar,openCV.CvScalar)">
            <summary>
            RandArr 
            Fills array with random numbers and updates the RNG state 
            </summary>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRandInt(System.UInt64)">
            <summary>
            RandInt 
            Returns 32-bit uint integer and updates RNG 
            </summary>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRandReal(System.UInt64)">
            <summary>
            RandReal 
            Returns floating-point random number and updates RNG 
            </summary>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvDFT(openCV.IplImage@,openCV.IplImage@,System.Int32,System.Int32)">
            <summary>
            DFT 
            Performs forward or inverse Discrete Fourier transform of 1D or 2D floating-point array 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetOptimalDFTSize(System.Int32)">
            <summary>
            GetOptimalDFTSize 
            Returns optimal DFT size for given vector size 
            </summary>
            <param name="size0"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMulSpectrums(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            MulSpectrums 
            Performs per-element multiplication of two Fourier spectrums 
            </summary>
            <param name="src1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvDCT(openCV.IplImage@,openCV.IplImage@,System.Int32,System.Int32)">
            <summary>
            DCT 
            Performs forward or inverse Discrete Cosine transform of 1D or 2D floating-point array 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateMemStorage(System.Int32)">
            <summary>
            CvMemStorage 
            Creates Memory storage 
            </summary>
            <param name="block_size"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateChildMemStorage(openCV.CvMemStorage@)">
            <summary>
            CreateChildMemStorage 
            Creates child memory storage 
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseMemStorage(openCV.CvMemStorage@)">
            <summary>
            ReleaseMemStorage 
            Releases memory storage 
            </summary>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvClearMemStorage(openCV.CvMemStorage@)">
            <summary>
            ClearMemStorage 
            Clears memory storage 
            </summary>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMemStorageAlloc(openCV.CvMemStorage@,System.Int32)">
            <summary>
            MemStorageAlloc 
            Allocates memory buffer in the storage 
            </summary>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMemStorageAllocString(openCV.CvMemStorage@,System.String,System.Int32)">
            <summary>
            MemStorageAllocString 
            Allocates text string in the storage 
            </summary>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSaveMemStoragePos(openCV.CvMemStorage@,openCV.CvMemStoragePos@)">
            <summary>
            SaveMemStoragePos 
            Saves memory storage position 
            </summary>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRestoreMemStoragePos(openCV.CvMemStorage@,openCV.CvMemStoragePos@)">
            <summary>
            RestoreMemStoragePos 
            Restores memory storage position 
            </summary>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetSeqBlockSize(openCV.CvSeq@,System.Int32)">
            <summary>
            SetSeqBlockSize 
            Sets up sequence block size 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqPush(openCV.CvSeq@,System.IntPtr)">
            <summary>
            SeqPush 
            Adds element to sequence end 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqPop(openCV.CvSeq@,System.IntPtr)">
            <summary>
            SeqPop 
            Removes element from sequence end 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqPushFront(openCV.CvSeq@,System.IntPtr)">
            <summary>
            SeqPushFront 
            Adds element to sequence beginning 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqPopFront(openCV.CvSeq@,System.IntPtr)">
            <summary>
            SeqPopFront 
            Removes element from sequence beginning 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqPushMulti(openCV.CvSeq@,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            SeqPushMulti 
            Pushes several elements to the either end of sequence 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqPopMulti(openCV.CvSeq@,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            SeqPopMulti 
            Removes several elements from the either end of sequence 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqInsert(openCV.CvSeq@,System.Int32,System.IntPtr)">
            <summary>
            SeqInsert 
            Inserts element in sequence middle 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqRemove(openCV.CvSeq@,System.Int32)">
            <summary>
            SeqRemove 
            Removes element from sequence middle 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvClearSeq(openCV.CvSeq@)">
            <summary>
            ClearSeq 
            Clears sequence 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetSeqElem(openCV.CvSeq@,System.Int32)">
            <summary>
            GetSeqElem 
            Returns pointer to sequence element by its index 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqElemIdx(openCV.CvSeq@,System.IntPtr,openCV.CvSeqBlock@)">
            <summary>
            SeqElemIdx 
            Returns index of concrete sequence element 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCvtSeqToArray(openCV.CvSeq@,System.IntPtr,openCV.CvSlice)">
            <summary>
            CvtSeqToArray 
            Copies sequence to one continuous block of memory 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMakeSeqHeaderForArray(System.Int32,System.Int32,System.Int32,openCV.CvSeq@,openCV.CvSeqBlock@)">
            <summary>
            MakeSeqHeaderForArray 
            Constructs sequence from array 
            </summary>
            <param name="seq_type"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqSlice(openCV.CvSeq@,openCV.CvSlice,openCV.CvMemStorage@,System.Int32)">
            <summary>
            SeqSlice 
            Makes separate header for the sequence slice 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqSlice(openCV.CvSeq@,openCV.CvSlice,System.Int32)">
            <summary>
            SeqSlice 
            Makes separate header for the sequence slice 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <!-- Nicht wohlgeformter XML-Kommentar wurde für den Member "M:openCV.cvlib.CvCloneSeq(openCV.CvSeq@,openCV.CvMemStorage@)" ignoriert -->
        <member name="M:openCV.cvlib.CvSeqRemoveSlice(openCV.CvSeq@,openCV.CvSlice)">
            <summary>
            SeqRemoveSlice 
            Removes sequence slice 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqInsertSlice(openCV.CvSeq@,System.Int32,openCV.IplImage@)">
            <summary>
            SeqInsertSlice 
            Inserts array in the middle of sequence 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqInvert(openCV.CvSeq@)">
            <summary>
            SeqInvert 
            Reverses the order of sequence elements 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqSort(openCV.CvSeq@,openCV.cvlib.OnCompareCallback,System.IntPtr)">
            <summary>
            SeqSort 
            Sorts sequence element using the specified comparison function 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqSearch(openCV.CvSeq@,System.IntPtr,System.IntPtr,System.Int32,System.Int32@,System.IntPtr)">
            <summary>
            SeqSearch 
            Searches element in sequence 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvStartAppendToSeq(openCV.CvSeq@,openCV.CvSeqWriter@)">
            <summary>
            StartAppendToSeq 
            Initializes process of writing data to sequence 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvStartWriteSeq(System.Int32,System.Int32,System.Int32,openCV.CvMemStorage@,openCV.CvSeqWriter@)">
            <summary>
            StartWriteSeq 
            Creates new sequence and initializes writer for it 
            </summary>
            <param name="seq_flags"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvEndWriteSeq(openCV.CvSeqWriter@)">
            <summary>
            EndWriteSeq 
            Finishes process of writing sequence 
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFlushSeqWriter(openCV.CvSeqWriter@)">
            <summary>
            FlushSeqWriter 
            Updates sequence headers from the writer state 
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvStartReadSeq(openCV.CvSeq@,openCV.CvSeqReader@,System.Int32)">
            <summary>
            StartReadSeq 
            Initializes process of sequential reading from sequence 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetSeqReaderPos(openCV.CvSeqReader@)">
            <summary>
            GetSeqReaderPos 
            Returns the current reader position 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetSeqReaderPos(openCV.CvSeqReader@,System.Int32,System.Int32)">
            <summary>
            SetSeqReaderPos 
            Moves the reader to specified position 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetAdd(openCV.CvSet@,openCV.CvSetElem@,openCV.CvSetElem@)">
            <summary>
            SetAdd 
            Occupies a node in the set 
            </summary>
            <param name="set_header"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetRemove(openCV.CvSet@,System.Int32)">
            <summary>
            SetRemove 
            Removes element from set 
            </summary>
            <param name="set_header"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetNew(openCV.CvSet@)">
            <summary>
            SetNew 
            Adds element to set (fast variant) 
            </summary>
            <param name="set_header"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetRemoveByPtr(openCV.CvSet@,System.IntPtr)">
            <summary>
            SetRemoveByPtr 
            Removes set element given its pointer 
            </summary>
            <param name="set_header"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetSetElem(openCV.CvSet@,System.Int32)">
            <summary>
            GetSetElem 
            Finds set element by its index 
            </summary>
            <param name="set_header"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvClearSet(openCV.CvSet@)">
            <summary>
            ClearSet 
            Clears set 
            </summary>
            <param name="set_header"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateGraph(System.Int32,System.Int32,System.Int32,openCV.CvMemStorage@)">
            <summary>
            CvGraph 
            Oriented or unoriented weigted graph 
            </summary>
            <param name="graph_flags"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGraphAddVtx(openCV.CvGraph@,openCV.CvGraphVtx@,openCV.CvGraphVtx@)">
            <summary>
            GraphAddVtx 
            Adds vertex to graph 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGraphRemoveVtx(openCV.CvGraph@,System.Int32)">
            <summary>
            GraphRemoveVtx 
            Removes vertex from graph 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGraphRemoveVtxByPtr(openCV.CvGraph@,openCV.CvGraphVtx@)">
            <summary>
            GraphRemoveVtxByPtr 
            Removes vertex from graph 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetGraphVtx(openCV.CvGraph@,System.Int32)">
            <summary>
            GetGraphVtx 
            Finds graph vertex by index 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGraphVtxIdx(openCV.CvGraph@,openCV.CvGraphVtx@)">
            <summary>
            GraphVtxIdx 
            Returns index of graph vertex 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGraphAddEdge(openCV.CvGraph@,System.Int32,System.Int32,openCV.CvGraphEdge@,openCV.CvGraphEdge@)">
            <summary>
            GraphAddEdge 
            Adds edge to graph 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGraphAddEdgeByPtr(openCV.CvGraph@,openCV.CvGraphVtx@,openCV.CvGraphVtx@,openCV.CvGraphEdge@,openCV.CvGraphEdge@)">
            <summary>
            GraphAddEdgeByPtr 
            Adds edge to graph 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGraphRemoveEdge(openCV.CvGraph@,System.Int32,System.Int32)">
            <summary>
            GraphRemoveEdge 
            Removes edge from graph 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGraphRemoveEdgeByPtr(openCV.CvGraph@,openCV.CvGraphVtx@,openCV.CvGraphVtx@)">
            <summary>
            GraphRemoveEdgeByPtr 
            Removes edge from graph 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFindGraphEdge(openCV.CvGraph@,System.Int32,System.Int32)">
            <summary>
            FindGraphEdge 
            Finds edge in graph 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFindGraphEdgeByPtr(openCV.CvGraph@,openCV.CvGraphVtx@,openCV.CvGraphVtx@)">
            <summary>
            FindGraphEdgeByPtr 
            Finds edge in graph 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGraphEdgeIdx(openCV.CvGraph@,openCV.CvGraphEdge@)">
            <summary>
            GraphEdgeIdx 
            Returns index of graph edge 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGraphVtxDegree(openCV.CvGraph@,System.Int32)">
            <summary>
            GraphVtxDegree 
            Counts edges indicent to the vertex 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGraphVtxDegreeByPtr(openCV.CvGraph@,openCV.CvGraphVtx@)">
            <summary>
            GraphVtxDegreeByPtr 
            Finds edge in graph 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvClearGraph(openCV.CvGraph@)">
            <summary>
            ClearGraph 
            Clears graph 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCloneGraph(openCV.CvGraph@,openCV.CvMemStorage@)">
            <summary>
            CloneGraph 
            Clone graph 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateGraphScanner(openCV.CvGraph@,openCV.CvGraphVtx@,System.Int32)">
            <summary>
            CvGraphScanner 
            Graph traversal state 
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvNextGraphItem(openCV.CvGraphScanner@)">
            <summary>
            NextGraphItem 
            Makes one or more steps of the graph traversal procedure 
            </summary>
            <param name="scanner"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseGraphScanner(openCV.CvGraphScanner@)">
            <summary>
            ReleaseGraphScanner 
            Finishes graph traversal procedure 
            </summary>
            <param name="scanner"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvInitTreeNodeIterator(openCV.CvTreeNodeIterator@,System.IntPtr,System.Int32)">
            <summary>
            CV_TREE_NODE_FIELDS 
            Helper macro for a tree node type declaration 
            </summary>
            <param name="tree_iterator"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvNextTreeNode(openCV.CvTreeNodeIterator@)">
            <summary>
            NextTreeNode 
            Returns the currently observed node and moves iterator toward the next node 
            </summary>
            <param name="tree_iterator"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPrevTreeNode(openCV.CvTreeNodeIterator@)">
            <summary>
            PrevTreeNode 
            Returns the currently observed node and moves iterator toward the previous node 
            </summary>
            <param name="tree_iterator"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvTreeToNodeSeq(System.IntPtr,System.Int32,openCV.CvMemStorage@)">
            <summary>
            TreeToNodeSeq 
            Gathers all node pointers to the single sequence 
            </summary>
            <param name="first"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvInsertNodeIntoTree(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            InsertNodeIntoTree 
            Adds new node to the tree 
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRemoveNodeFromTree(System.IntPtr,System.IntPtr)">
            <summary>
            RemoveNodeFromTree 
            Removes node from tree 
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvLine(openCV.IplImage@,openCV.CvPoint,openCV.CvPoint,openCV.CvScalar,System.Int32,System.Int32,System.Int32)">
            <summary>
            CV_RGB 
            Constructs a color value 
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRectangle(openCV.IplImage@,openCV.CvPoint,openCV.CvPoint,openCV.CvScalar,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rectangle 
            Draws simple, thick or filled rectangle 
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCircle(openCV.IplImage@,openCV.CvPoint,System.Int32,openCV.CvScalar,System.Int32,System.Int32,System.Int32)">
            <summary>
            Circle 
            Draws a circle 
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvEllipse(openCV.IplImage@,openCV.CvPoint,openCV.CvSize,System.Double,System.Double,System.Double,openCV.CvScalar,System.Int32,System.Int32,System.Int32)">
            <summary>
            Ellipse 
            Draws simple or thick elliptic arc or fills ellipse sector 
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvEllipseBox(openCV.IplImage@,openCV.CvBox2D,openCV.CvScalar,System.Int32,System.Int32,System.Int32)">
            <summary>
            EllipseBox 
            Draws simple or thick elliptic arc or fills ellipse sector 
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFillPoly(openCV.IplImage@,System.IntPtr@,System.Int32[],System.Int32,openCV.CvScalar,System.Int32,System.Int32)">
            <summary>
            FillPoly 
            Fills polygons interior 
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFillConvexPoly(openCV.IplImage@,openCV.CvPoint@,System.Int32,openCV.CvScalar,System.Int32,System.Int32)">
            <summary>
            FillConvexPoly 
            Fills convex polygon 
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPolyLine(openCV.IplImage@,openCV.CvPoint[]@,System.Int32@,System.Int32,System.Int32,openCV.CvScalar,System.Int32,System.Int32,System.Int32)">
            <summary>
            PolyLine 
            Draws simple or thick polygons 
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvInitFont(openCV.CvFont@,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            InitFont 
            Initializes font structure 
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPutText(openCV.IplImage@,System.String,openCV.CvPoint,openCV.CvFont@,openCV.CvScalar)">
            <summary>
            PutText 
            Draws text string 
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetTextSize(System.String,openCV.CvFont@,openCV.CvSize@,System.Int32@)">
            <summary>
            GetTextSize 
            Retrieves width and height of text string 
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvDrawContours(openCV.IplImage@,openCV.CvSeq@,openCV.CvScalar,openCV.CvScalar,System.Int32,System.Int32,System.Int32,openCV.CvPoint)">
            <summary>
            DrawContours 
            Draws contour outlines or interiors in the image 
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvInitLineIterator(openCV.IplImage@,openCV.CvPoint,openCV.CvPoint,openCV.CvLineIterator@,System.Int32,System.Int32)">
            <summary>
            InitLineIterator 
            Initializes line iterator 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvClipLine(openCV.CvSize,openCV.CvPoint@,openCV.CvPoint@)">
            <summary>
            ClipLine 
            Clips the line against the image rectangle 
            </summary>
            <param name="img_size"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvEllipse2Poly(openCV.CvPoint,openCV.CvSize,System.Int32,System.Int32,System.Int32,openCV.CvPoint@,System.Int32)">
            <summary>
            Ellipse2Poly 
            Approximates elliptic arc with polyline 
            </summary>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAttrValue(openCV.CvAttrList@,System.String)">
            <summary>
            CvAttrValue
            </summary>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseFileStorage(openCV.CvFileStorage@)">
            <summary>
            ReleaseFileStorage 
            Releases file storage 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvStartWriteStruct(openCV.CvFileStorage@,System.String,System.Int32,System.String,openCV.CvAttrList)">
            <summary>
            StartWriteStruct 
            Starts writing a new structure 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvEndWriteStruct(openCV.CvFileStorage@)">
            <summary>
            EndWriteStruct 
            Ends writing a structure 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvWriteInt(openCV.CvFileStorage@,System.String,System.Int32)">
            <summary>
            WriteInt 
            Writes an integer value 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvWriteReal(openCV.CvFileStorage@,System.String,System.Double)">
            <summary>
            WriteReal 
            Writes a floating-point value 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvWriteString(openCV.CvFileStorage@,System.String,System.String,System.Int32)">
            <summary>
            WriteString 
            Writes a text string 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvWriteComment(openCV.CvFileStorage@,System.String,System.Int32)">
            <summary>
            WriteComment 
            Writes comment 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvStartNextStream(openCV.CvFileStorage@)">
            <summary>
            StartNextStream 
            Starts the next stream 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvWrite(openCV.CvFileStorage@,System.String,System.IntPtr,openCV.CvAttrList)">
            <summary>
            Write 
            Writes user object 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvWriteRawData(openCV.CvFileStorage@,System.IntPtr,System.Int32,System.String)">
            <summary>
            WriteRawData 
            Writes multiple numbers 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvWriteFileNode(openCV.CvFileStorage@,System.String,openCV.CvFileNode@,System.Int32)">
            <summary>
            WriteFileNode 
            Writes file node to another file storage 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetRootFileNode(openCV.CvFileStorage@,System.Int32)">
            <summary>
            GetRootFileNode 
            Retrieves one of top-level nodes of the file storage 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetFileNodeByName(openCV.CvFileStorage@,System.String)">
            <summary>
            GetFileNodeByName 
            Finds node in the map or file storage 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetHashedKey(openCV.CvFileStorage@,System.String,System.Int32,System.Int32)">
            <summary>
            GetHashedKey 
            Returns a unique pointer for given name 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetFileNode(openCV.CvFileStorage@,openCV.CvFileNode@,openCV.CvStringHashNode@,System.Int32)">
            <summary>
            GetFileNode 
            Finds node in the map or file storage 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetFileNodeName(openCV.CvFileNode@)">
            <summary>
            GetFileNodeName 
            Returns name of file node 
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReadInt(openCV.CvFileNode@,System.Int32)">
            <summary>
            ReadInt 
            Retrieves integer value from file node 
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReadIntByName(openCV.CvFileStorage@,openCV.CvFileNode@,System.String,System.Int32)">
            <summary>
            ReadIntByName 
            Finds file node and returns its value 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReadReal(openCV.CvFileNode@,System.Double)">
            <summary>
            ReadReal 
            Retrieves floating-point value from file node 
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReadRealByName(openCV.CvFileStorage@,openCV.CvFileNode@,System.String,System.Double)">
            <summary>
            ReadRealByName 
            Finds file node and returns its value 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReadString(openCV.CvFileNode@,System.String)">
            <summary>
            ReadString 
            Retrieves text string from file node 
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReadStringByName(openCV.CvFileStorage@,openCV.CvFileNode@,System.String,System.String)">
            <summary>
            ReadStringByName 
            Finds file node and returns its value 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRead(openCV.CvFileStorage@,openCV.CvFileNode@)">
            <summary>
            Read 
            Decodes object and returns pointer to it 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReadRawData(openCV.CvFileStorage@,openCV.CvFileNode@,System.IntPtr,System.String)">
            <summary>
            ReadRawData 
            Reads multiple numbers 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvStartReadRawData(openCV.CvFileStorage@,openCV.CvFileNode@,openCV.CvSeqReader@)">
            <summary>
            StartReadRawData 
            Initializes file node sequence reader 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReadRawDataSlice(openCV.CvFileStorage@,openCV.CvSeqReader@,System.Int32,System.IntPtr,System.String)">
            <summary>
            ReadRawDataSlice 
            Initializes file node sequence reader 
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRegisterType(openCV.CvTypeInfo@)">
            <summary>
            CvTypeInfo 
            Type information 
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvUnregisterType(System.String)">
            <summary>
            UnregisterType 
            Unregisters the type 
            </summary>
            <param name="type_name"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFirstType">
            <summary>
            FirstType 
            Returns the beginning of type list 
            </summary>
            <param name="type_name"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvTypeOf(System.IntPtr)">
            <summary>
            TypeOf 
            Returns type of the object 
            </summary>
            <param name="struct_ptr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRelease(System.IntPtr@)">
            <summary>
            Release 
            Releases the object 
            </summary>
            <param name="struct_ptr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvClone(System.IntPtr)">
            <summary>
            Clone 
            Makes a clone of the object 
            </summary>
            <param name="struct_ptr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSave(System.String,System.IntPtr,System.String,System.String,openCV.CvAttrList)">
            <summary>
            Save 
            Saves object to file 
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvLoad(System.String,openCV.CvMemStorage@,System.String,System.Text.StringBuilder@)">
            <summary>
            Load 
            Loads object from file 
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCheckArr(openCV.IplImage@,System.Int32,System.Double,System.Double)">
            <summary>
            CheckArr 
            Checks every element of input array for invalid values 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvKMeans2(openCV.IplImage@,System.Int32,openCV.IplImage@,openCV.CvTermCriteria)">
            <summary>
            KMeans2 
            Splits set of vectors by given number of clusters 
            </summary>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSeqPartition(openCV.CvSeq@,openCV.CvMemStorage@,openCV.CvSeq@,System.IntPtr,System.IntPtr)">
            <summary>
            SeqPartition 
            Splits sequence into equivalency classes 
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetErrMode(System.Int32)">
            <summary>
            ERROR Handling Macros 
            Macros for raising an error, checking for errors etc 
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetErrMode">
            <summary>
            GetErrMode 
            Returns the current error mode 
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvError(System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Error 
            Raises an error 
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvErrorStr(System.Int32)">
            <summary>
            ErrorStr 
            Returns textual description of error status code 
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRedirectError(openCV.cvlib.OnErrorCallback)">
            <summary>
            RedirectError 
            Sets a new error handler 
            </summary>
            <param name="error_handler"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAlloc(System.Int32)">
            <summary>
            Alloc 
            Allocates memory buffer 
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFree(System.IntPtr@)">
            <summary>
            Free 
            Deallocates memory buffer 
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetTickCount">
            <summary>
            GetTickCount 
            Returns number of tics 
            </summary>
            <param name="module_info"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetModuleInfo(System.String,System.Text.StringBuilder@)">
            <summary>
            GetModuleInfo 
            Retrieves information about the registered module(s) and plugins 
            </summary>
            <param name="module_name"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvUseOptimized(System.Int32)">
            <summary>
            UseOptimized 
            Switches between optimized/non-optimized modes 
            </summary>
            <param name="on_off"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetNumThreads">
            <summary>
            SetIPLAllocators 
            Switches to IPL functions for image allocation/deallocation 
            </summary>
            <param name="create_header"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetNumThreads(System.Int32)">
            <summary>
            GetNumThreads 
            Returns the current number of threads used 
            </summary>
            <param name="threads"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetThreadNum">
            <summary>
            GetThreadNum 
            Returns index of the current thread 
            </summary>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvLoadImage(System.String,System.Int32)">
            <summary>
            Loads an image from file
            </summary>
            <param name="path">Path to the file to be loaded.</param>
            <param name="flags">Specifies colorness and depth of the loaded image:
            The colorness specifies whether the loaded image is to be converted to 3 channels (CV_LOAD_IMAGE_COLOR), 1 channel (CV_LOAD_IMAGE_GRAYSCALE), or left as it was in the input file (CV_LOAD_IMAGE_ANYCOLOR).
            Depth specifies whether the loaded image is to be converted to 8 bits per pixel per color channel as was customary in previous versions of OpenCV or left as they were in the input file. If CV_LOAD_IMAGE_ANYDEPTH is passed the pixel format can be 8 bit unsigned, 16 bit unsigned, 32 bit signed or 32 bit floating point.
            If conflicting flags are passed the flag with the smaller numerical value wins. That is if CV_LOAD_IMAGE_COLOR | CV_LOAD_IMAGE_ANYCOLOR is passed the image is loaded with 3 channels. CV_LOAD_IMAGE_ANYCOLOR is equivalent to specifying CV_LOAD_IMAGE_UNCHANGED. However, CV_LOAD_IMAGE_ANYCOLOR has the advantage that it can be combined with CV_LOAD_IMAGE_ANYDEPTH. So CV_LOAD_IMAGE_UNCHANGED should not be used any longer.
            If you want to load the image as truthfully as possible pass CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR.</param>
            <returns>IplImage</returns>
        </member>
        <member name="M:openCV.cvlib.CvSaveImage(System.String,openCV.IplImage@)">
            <summary>
            Loads an image from file
            </summary>
            <param name="path">Name of file to be loaded.</param>
            <param name="flags">Specifies colorness and depth of the loaded image:
            The colorness specifies whether the loaded image is to be converted to 3 channels (CV_LOAD_IMAGE_COLOR), 1 channel (CV_LOAD_IMAGE_GRAYSCALE), or left as it was in the input file (CV_LOAD_IMAGE_ANYCOLOR).
            Depth specifies whether the loaded image is to be converted to 8 bits per pixel per color channel as was customary in previous versions of OpenCV or left as they were in the input file. If CV_LOAD_IMAGE_ANYDEPTH is passed the pixel format can be 8 bit unsigned, 16 bit unsigned, 32 bit signed or 32 bit floating point.
            If conflicting flags are passed the flag with the smaller numerical value wins. That is if CV_LOAD_IMAGE_COLOR | CV_LOAD_IMAGE_ANYCOLOR is passed the image is loaded with 3 channels. CV_LOAD_IMAGE_ANYCOLOR is equivalent to specifying CV_LOAD_IMAGE_UNCHANGED. However, CV_LOAD_IMAGE_ANYCOLOR has the advantage that it can be combined with CV_LOAD_IMAGE_ANYDEPTH. So CV_LOAD_IMAGE_UNCHANGED should not be used any longer.
            If you want to load the image as truthfully as possible pass CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR.</param>
            <returns>IplImage</returns>
        </member>
        <member name="M:openCV.cvlib.ToBitmap(openCV.IplImage,System.Boolean)">
            <summary>
            Converts IplImage to Windows Bitmap
            Only IPL_DEPTH_8U is supported
            Only interleaved images are supported
            Only 3 channels Images are supported
            </summary>
            <param name="image">IplImage to convert</param>
            <param name="dispose">If true IplImage will be disposed</param>
            <returns>Bitmap with Format24bppRgb</returns>
        </member>
        <member name="M:openCV.cvlib.ToIplImage(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts Bitmap Image to IplImage
            Only PixelFormat.Format24bppRgb or 
            PixelFormat.Format8bppIndexed is supported
            </summary>
            <param name="image">Bitmap to convert</param>
            <param name="dispose">If true the Bitmap will be disposed</param>
            <returns>IplImage either 3 or 1 channels with Depht 8U</returns>
        </member>
        <member name="M:openCV.cvlib.RoiParam(openCV.IplImage,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            get ROI params
            </summary>
            <param name="start"></param>
            <param name="rows"></param>
            <param name="elementCount"></param>
            <param name="byteWidth"></param>
            <param name="widthStep"></param>
        </member>
        <member name="M:openCV.cvlib.memcpy(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            classic memcopy
            </summary>
            <param name="dest">dst ptr</param>
            <param name="src">src ptr</param>
            <param name="len">lenght of mem block</param>
        </member>
        <member name="M:openCV.cvlib.CvCreateFileCapture(System.String)">
            <summary>
            The function cvCreateFileCapture allocates and 
            initialized the CvCapture structure for reading the 
            video stream from the specified file.
            </summary>
            <param name="path">Name of the video file.</param>
            <returns>CvCapture structure</returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateCameraCapture(System.Int32)">
            <summary>
            The function cvCreateCameraCapture allocates and initialized 
            the CvCapture structure for reading a video stream from the 
            camera. Currently two camera interfaces can be used on Windows: 
            Video for Windows (VFW) and Matrox Imaging Library (MIL); 
            </summary>
            <param name="idx">Index of the camera to be used. If there is 
            only one camera or it does not matter what camera to use -1 
            may be passed.</param>
            <returns>CvCapture structure</returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseCapture(openCV.CvCapture@)">
            <summary>
            The function cvReleaseCapture releases the CvCapture
            structure allocated by cvCreateFileCapture or cvCreateCameraCapture.
            </summary>
            <param name="capture">Video capturing structure.</param>
        </member>
        <member name="M:openCV.cvlib.CvGrabFrame(openCV.CvCapture@)">
            <summary>
            The function cvGrabFrame grabs the frame from camera or file. 
            The grabbed frame is stored internally. The purpose of this 
            function is to grab frame fast that is important for 
            syncronization in case of reading from several cameras simultaneously. 
            The grabbed frames are not exposed because they may be stored in 
            compressed format (as defined by camera/driver). To retrieve the 
            grabbed frame, cvRetrieveFrame should be used.
            </summary>
            <param name="capture">video capturing structure.</param>
            <returns>1 if succsess</returns>
        </member>
        <member name="M:openCV.cvlib.CvRetrieveFrame(openCV.CvCapture@)">
            <summary>
            The function cvRetrieveFrame returns the pointer to the image 
            grabbed with cvGrabFrame function. The returned image should 
            not be released or modified by user.
            </summary>
            <param name="capture">video capturing structure.</param>
            <returns>Image</returns>
        </member>
        <member name="M:openCV.cvlib.CvQueryFrame(openCV.CvCapture@)">
            <summary>
            The function cvQueryFrame grabs a frame from camera 
            or video file, decompresses and returns it. This function 
            is just a combination of cvGrabFrame and cvRetrieveFrame 
            in one call. The returned image should not be released or 
            modified by user.
            </summary>
            <param name="capture">video capturing structure.</param>
            <returns>Image</returns>
        </member>
        <member name="M:openCV.cvlib.CvQueryFrame(openCV.CvCapture@,System.Boolean)">
            <summary>
            The function cvQueryFrameFast is same like query frame
            but returns pointer and has optional Flip param
            </summary>
            <param name="capture">video capturing structure.</param>
            <returns>Image</returns>
        </member>
        <member name="M:openCV.cvlib.cvGetCaptureProperty(openCV.CvCapture,System.Int32)">
            <summary>
            The function cvGetCaptureProperty retrieves the specified 
            property of camera or video file.
            </summary>
            <param name="capture">video capturing structure.</param>
            <param name="property_id">property identifier. Can be one of the following:
            CV_CAP_PROP_POS_MSEC - film current position in milliseconds or video capture timestamp
            CV_CAP_PROP_POS_FRAMES - 0-based index of the frame to be decoded/captured next
            CV_CAP_PROP_POS_AVI_RATIO - relative position of video file (0 - start of the film, 1 - end of the film)
            CV_CAP_PROP_FRAME_WIDTH - width of frames in the video stream
            CV_CAP_PROP_FRAME_HEIGHT - height of frames in the video stream
            CV_CAP_PROP_FPS - frame rate
            CV_CAP_PROP_FOURCC - 4-character code of codec. CV_CAP_PROP_FRAME_COUNT - number of frames in video file.
            </param>
            <returns>value</returns>
        </member>
        <member name="M:openCV.cvlib.CvSetCaptureProperty(openCV.CvCapture@,System.Int32,System.Double)">
            <summary>
            The function cvGetCaptureProperty sets the specified 
            property of camera or video file.
            </summary>
            <param name="capture">video capturing structure.</param>
            <param name="property_id">property identifier. Can be one of the following:
            CV_CAP_PROP_POS_MSEC - film current position in milliseconds or video capture timestamp
            CV_CAP_PROP_POS_FRAMES - 0-based index of the frame to be decoded/captured next
            CV_CAP_PROP_POS_AVI_RATIO - relative position of video file (0 - start of the film, 1 - end of the film)
            CV_CAP_PROP_FRAME_WIDTH - width of frames in the video stream
            CV_CAP_PROP_FRAME_HEIGHT - height of frames in the video stream
            CV_CAP_PROP_FPS - frame rate
            CV_CAP_PROP_FOURCC - 4-character code of codec. CV_CAP_PROP_FRAME_COUNT - number of frames in video file.
            </param>
            <param name="value">the value to be set</param>
        </member>
        <member name="M:openCV.cvlib.CvCreateVideoWriter(System.String,System.Int32,System.Double,openCV.CvSize,System.Int32)">
            <summary>
            The function cvCreateVideoWriter creates video writer structure.
            </summary>
            <param name="filename">Name of the output video file.</param>
            <param name="fourcc">4-character code of codec used to compress 
            the frames. For example, CV_FOURCC('P','I','M','1') is MPEG-1 codec, 
            CV_FOURCC('M','J','P','G') is motion-jpeg codec etc. 
            Under Win32 it is possible to pass -1 in order to choose compression 
            method and additional compression parameters from dialog.</param>
            <param name="fps">Framerate of the created video stream.</param>
            <param name="frame_size">Size of video frames</param>
            <param name="is_color">If it is not zero, the encoder will expect 
            and encode color frames, otherwise it will work with grayscale 
            frames (the flag is currently supported on Windows only).</param>
            <returns>Video writer structure (ptr only)</returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseVideoWriter(openCV.CvVideoWriter@)">
            <summary>
            The function cvReleaseVideoWriter finishes writing 
            to video file and releases the structure.
            </summary>
            <param name="vw">Pointer to video file writer structure.</param>
        </member>
        <member name="M:openCV.cvlib.CvConvertImage(openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            ConvertImage
            The function cvConvertImage converts one image to another 
            and flips the result vertically if required. 
            The function is used by cvShowImage.
            </summary>
            <param name="src">Source image.</param>
            <param name="dst">Destination image. Must be single-channel or 3-channel 8-bit image.</param>
            <param name="flags">The operation flags:
            CV_CVTIMG_FLIP - flip the image vertically 
            CV_CVTIMG_SWAP_RB - swap red and blue channels. 
            In OpenCV color images have BGR channel order, 
            however on some systems the order needs to be reversed before 
            displaying the image (cvShowImage does this automatically).</param>
        </member>
        <member name="M:openCV.cvlib.CvNamedWindow(System.String,System.Int32)">
            <summary>
            cvNamedWindow 
            Creates window 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvDestroyWindow(System.String)">
            <summary>
            cvDestroyWindow 
            Destroys a window 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvDestroyAllWindows">
            <summary>
            cvDestroyAllWindows 
            Destroys all the HighGUI windows 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMoveWindow(System.String,System.Int32,System.Int32)">
            <summary>
            cvMoveWindow 
            Sets window position 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetWindowHandle(System.String)">
            <summary>
            cvGetWindowHandle 
            Gets window handle by name 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetWindowName(System.IntPtr)">
            <summary>
            cvGetWindowName 
            Gets window name by handle 
            </summary>
            <param name="window_handle"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvShowImage(System.String,openCV.IplImage@)">
            <summary>
            The function cvShowImage shows the image
            in the specified window. If the window was created
            with CV_WINDOW_AUTOSIZE flag then the image is shown
            with its original size, otherwise the image is scaled
            to fit the window.
            </summary>
            <param name="name">The name of the window.</param>
            <param name="image">The image to be shown.</param>
        </member>
        <member name="M:openCV.cvlib.CvShowImageFast(System.String,System.IntPtr)">
            <summary>
            The function cvShowImage shows the image
            in the specified window. If the window was created
            with CV_WINDOW_AUTOSIZE flag then the image is shown
            with its original size, otherwise the image is scaled
            to fit the window.
            </summary>
            <param name="name">The name of the window.</param>
            <param name="image">image pointer as returned by some special functions</param>
        </member>
        <member name="M:openCV.cvlib.CvCreateTrackbar(System.String,System.String,System.Int32@,System.Int32,openCV.cvlib.OnTrackbarChangeCallback)">
            <summary>
            Creates the trackbar and attaches it to the specified window
            </summary>
            <param name="trackbar_name">The trackbar name.</param>
            <param name="window_name">The window name.</param>
            <param name="value">Trackbar value (output)</param>
            <param name="count">Count.</param>
            <param name="on_change">The on_change callback (delegate)</param>
            <returns>not documented</returns>
        </member>
        <member name="M:openCV.cvlib.CvGetTrackbarPos(System.String,System.String)">
            <summary>
            Retrieves trackbar position
            </summary>
            <param name="trackbar_name">The trackbar name.</param>
            <param name="window_name">The window name.</param>
            <returns>trackbar position</returns>
        </member>
        <member name="M:openCV.cvlib.CvSetTrackbarPos(System.String,System.String,System.Int32)">
            <summary>
            Sets trackbar position
            </summary>
            <param name="trackbar_name">The trackbar name.</param>
            <param name="window_name">The window name.</param>
            <param name="pos">The trackbar pos.</param>
        </member>
        <member name="M:openCV.cvlib.CvSetMouseCallback(System.String,openCV.cvlib.OnMouseCallback,System.IntPtr)">
            <summary>
            The function cvSetMouseCallback sets the callback function for mouse events occuting within the specified window
            </summary>
            <param name="window_name">The window_name.</param>
            <param name="on_mouse">The on_mouse callback delegate.</param>
            <param name="param">The param.</param>
        </member>
        <member name="M:openCV.cvlib.CvWaitKey(System.Int32)">
            <summary>
            Waits for a pressed key
            </summary>
            <param name="delay">The delay.</param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSobel(openCV.IplImage@,openCV.IplImage@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sobel 
            Calculates first, second, third or mixed image derivatives using extended Sobel operator 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvLaplace(openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            Laplace 
            Calculates Laplacian of the image 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCanny(openCV.IplImage@,openCV.IplImage@,System.Double,System.Double,System.Int32)">
            <summary>
            Canny 
            Implements Canny algorithm for edge detection 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPreCornerDetect(openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            PreCornerDetect 
            Calculates feature map for corner detection 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCornerEigenValsAndVecs(openCV.IplImage@,openCV.IplImage@,System.Int32,System.Int32)">
            <summary>
            CornerEigenValsAndVecs 
            Calculates eigenvalues and eigenvectors of image blocks for corner detection 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCornerMinEigenVal(openCV.IplImage@,openCV.IplImage@,System.Int32,System.Int32)">
            <summary>
            CornerMinEigenVal 
            Calculates minimal eigenvalue of gradient matrices for corner detection 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCornerHarris(openCV.IplImage@,openCV.IplImage@,System.Int32,System.Int32,System.Double)">
            <summary>
            CornerHarris 
            Harris edge detector 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFindCornerSubPix(openCV.IplImage@,System.IntPtr,System.Int32,openCV.CvSize,openCV.CvSize,openCV.CvTermCriteria)">
            <summary>
            FindCornerSubPix 
            Refines corner locations 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGoodFeaturesToTrack(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.IntPtr,System.Int32@,System.Double,System.Double,System.IntPtr,System.Int32,System.Int32,System.Double)">
            <summary>
            GoodFeaturesToTrack 
            Determines strong corners on image 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSampleLine(openCV.IplImage@,openCV.CvPoint,openCV.CvPoint,System.IntPtr,System.Int32)">
            <summary>
            SampleLine 
            Reads raster line to buffer 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetRectSubPix(openCV.IplImage@,openCV.IplImage@,openCV.CvPoint2D32f)">
            <summary>
            GetRectSubPix 
            Retrieves pixel rectangle from image with sub-pixel accuracy 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetQuadrangleSubPix(openCV.IplImage@,openCV.IplImage@,openCV.CvMat@)">
            <summary>
            GetQuadrangleSubPix 
            Retrieves pixel quadrangle from image with sub-pixel accuracy 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvResize(openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            Resize 
            Resizes image 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvWarpAffine(openCV.IplImage@,openCV.IplImage@,openCV.CvMat@,System.Int32,openCV.CvScalar)">
            <summary>
            WarpAffine 
            Applies affine transformation to the image 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetAffineTransform(System.IntPtr,System.IntPtr,openCV.CvMat@)">
            <summary>
            GetAffineTransform 
            Calculates affine transform from 3 corresponding points 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.Cv2DRotationMatrix(openCV.CvPoint2D32f,System.Double,System.Double,openCV.CvMat@)">
            <summary>
            2DRotationMatrix 
            Calculates affine matrix of 2d rotation 
            </summary>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvWarpPerspective(openCV.IplImage@,openCV.IplImage@,openCV.CvMat@,System.Int32,openCV.CvScalar)">
            <summary>
            WarpPerspective 
            Applies perspective transformation to the image 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetPerspectiveTransform(System.IntPtr,System.IntPtr,openCV.CvMat@)">
            <summary>
            GetPerspectiveTransform 
            Calculates perspective transform from 4 corresponding points 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRemap(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Int32,openCV.CvScalar)">
            <summary>
            Remap 
            Applies generic geometrical transformation to the image 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvLogPolar(openCV.IplImage@,openCV.IplImage@,openCV.CvPoint2D32f,System.Double,System.Int32)">
            <summary>
            LogPolar 
            Remaps image to log-polar space 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateStructuringElementEx(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            CreateStructuringElementEx 
            Creates structuring element 
            </summary>
            <param name="cols"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseStructuringElement(openCV.IplConvKernel@)">
            <summary>
            ReleaseStructuringElement 
            Deletes structuring element 
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvErode(openCV.IplImage@,openCV.IplImage@,openCV.IplConvKernel@,System.Int32)">
            <summary>
            Erode 
            Erodes image by using arbitrary structuring element 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvDilate(openCV.IplImage@,openCV.IplImage@,openCV.IplConvKernel@,System.Int32)">
            <summary>
            Dilate 
            Dilates image by using arbitrary structuring element 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMorphologyEx(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplConvKernel@,System.Int32,System.Int32)">
            <summary>
            MorphologyEx 
            Performs advanced morphological transformations 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSmooth(openCV.IplImage@,openCV.IplImage@,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Smooth 
            Smooths the image in one of several ways 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFilter2D(openCV.IplImage@,openCV.IplImage@,openCV.CvMat@,openCV.CvPoint)">
            <summary>
            Filter2D 
            Convolves image with the kernel 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCopyMakeBorder(openCV.IplImage@,openCV.IplImage@,openCV.CvPoint,System.Int32,openCV.CvScalar)">
            <summary>
            CopyMakeBorder 
            Copies image and makes border around it 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvIntegral(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Integral 
            Calculates integral images 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCvtColor(openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            CvtColor 
            Converts image from one color space to another 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvThreshold(openCV.IplImage@,openCV.IplImage@,System.Double,System.Double,System.Int32)">
            <summary>
            Threshold 
            Applies fixed-level threshold to array elements 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAdaptiveThreshold(openCV.IplImage@,openCV.IplImage@,System.Double,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            AdaptiveThreshold 
            Applies adaptive threshold to array 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPyrDown(openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            PyrDown 
            Downsamples image 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPyrUp(openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            PyrUp 
            Upsamples image 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFloodFill(openCV.IplImage@,openCV.CvPoint,openCV.CvScalar,openCV.CvScalar,openCV.CvScalar,openCV.CvConnectedComp@,System.Int32,openCV.IplImage@)">
            <summary>
            CvFloodFill
            Connected component 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFindContours(openCV.IplImage@,openCV.CvMemStorage@,System.IntPtr@,System.Int32,System.Int32,System.Int32,openCV.CvPoint)">
            <summary>
            FindContours 
            Finds contours in binary image 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvStartFindContours(openCV.IplImage@,openCV.CvMemStorage@,System.Int32,System.Int32)">
            <summary>
            StartFindContours 
            Initializes contour scanning process 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFindNextContour(openCV.CvContourScanner)">
            <summary>
            FindNextContour 
            Finds next contour in the image 
            </summary>
            <param name="scanner"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSubstituteContour(openCV.CvContourScanner,openCV.CvSeq@)">
            <summary>
            SubstituteContour 
            Replaces retrieved contour 
            </summary>
            <param name="scanner"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvEndFindContours(openCV.CvContourScanner@)">
            <summary>
            EndFindContours 
            Finishes scanning process 
            </summary>
            <param name="scanner"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPyrSegmentation(openCV.IplImage@,openCV.IplImage@,openCV.CvMemStorage@,openCV.CvSeq@,System.Int32,System.Double,System.Double)">
            <summary>
            PyrSegmentation 
            Does image segmentation by pyramids 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPyrMeanShiftFiltering(openCV.IplImage@,openCV.IplImage@,System.Double,System.Double,System.Int32)">
            <summary>
            PyrMeanShiftFiltering 
            Does meanshift image segmentation 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvWatershed(openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Watershed 
            Does watershed segmentation 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMoments(openCV.IplImage@,openCV.CvMoments@,System.Int32)">
            <summary>
            Moments 
            Calculates all moments up to third order of a polygon or rasterized shape 
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetSpatialMoment(openCV.CvMoments@,System.Int32,System.Int32)">
            <summary>
            GetSpatialMoment 
            Retrieves spatial moment from moment state structure 
            </summary>
            <param name="moments"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetCentralMoment(openCV.CvMoments@,System.Int32,System.Int32)">
            <summary>
            GetCentralMoment 
            Retrieves central moment from moment state structure 
            </summary>
            <param name="moments"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetNormalizedCentralMoment(openCV.CvMoments@,System.Int32,System.Int32)">
            <summary>
            GetNormalizedCentralMoment 
            Retrieves normalized central moment from moment state structure 
            </summary>
            <param name="moments"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetHuMoments(openCV.CvMoments@,openCV.CvHuMoments@)">
            <summary>
            GetHuMoments 
            Calculates seven Hu invariants 
            </summary>
            <param name="moments"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvHoughLines2(openCV.IplImage@,System.IntPtr,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            HoughLines2 
            Finds lines in binary image using Hough transform 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvHoughCircles(openCV.IplImage@,System.IntPtr,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            HoughCircles 
            Finds circles in grayscale image using Hough transform 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvDistTransform(openCV.IplImage@,openCV.IplImage@,System.Int32,System.Int32,System.Single[],openCV.IplImage@)">
            <summary>
            DistTransform 
            Calculates distance to closest zero pixel for all non-zero pixels of source 
            image 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvInpaint(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Int32,System.Double)">
            <summary>
            Inpaint 
            Inpaints the selected region in the image 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateHist(System.Int32,System.Int32[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            CvHistogram 
            Muti-dimensional histogram 
            </summary>
            <param name="dims"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetHistBinRanges(openCV.CvHistogram@,System.IntPtr,System.Int32)">
            <summary>
            SetHistBinRanges 
            Sets bounds of histogram bins 
            </summary>
            <param name="hist"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseHist(openCV.CvHistogram@)">
            <summary>
            ReleaseHist 
            Releases histogram 
            </summary>
            <param name="hist"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvClearHist(openCV.CvHistogram@)">
            <summary>
            ClearHist 
            Clears histogram 
            </summary>
            <param name="hist"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMakeHistHeaderForArray(System.Int32,System.Int32[],openCV.CvHistogram@,System.Single[],System.IntPtr,System.Int32)">
            <summary>
            MakeHistHeaderForArray 
            Makes a histogram out of array 
            </summary>
            <param name="dims"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvGetMinMaxHistValue(openCV.CvHistogram@,System.Single@,System.Single@,System.Int32@,System.Int32@)">
            <summary>
            GetMinMaxHistValue 
            Finds minimum and maximum histogram bins 
            </summary>
            <param name="hist"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvNormalizeHist(openCV.CvHistogram@,System.Double)">
            <summary>
            NormalizeHist 
            Normalizes histogram 
            </summary>
            <param name="hist"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvThreshHist(openCV.CvHistogram@,System.Double)">
            <summary>
            ThreshHist 
            Thresholds histogram 
            </summary>
            <param name="hist"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCompareHist(openCV.CvHistogram@,openCV.CvHistogram@,System.Int32)">
            <summary>
            CompareHist 
            Compares two dense histograms 
            </summary>
            <param name="hist1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCopyHist(openCV.CvHistogram@,openCV.CvHistogram@)">
            <summary>
            CopyHist 
            Copies histogram 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcHist(System.IntPtr[],openCV.CvHistogram@,System.Int32,openCV.IplImage@)">
            <summary>
            CalcHist 
            Calculates histogram of image(s) 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcBackProject(openCV.IplImage@,openCV.IplImage@,openCV.CvHistogram@)">
            <summary>
            CalcBackProject 
            Calculates back projection 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcArrBackProject(openCV.IplImage@,openCV.IplImage@,openCV.CvHistogram@)">
            <summary>
            CalcBackProject 
            Calculates back projection 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcBackProjectPatch(openCV.IplImage@,openCV.IplImage@,openCV.CvSize,openCV.CvHistogram@,System.Int32,System.Single)">
            <summary>
            CalcBackProjectPatch 
            Locates a template within image by histogram comparison 
            </summary>
            <param name="images"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcProbDensity(openCV.CvHistogram@,openCV.CvHistogram@,openCV.CvHistogram@,System.Double)">
            <summary>
            CalcProbDensity 
            Divides one histogram by another 
            </summary>
            <param name="hist1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvEqualizeHist(openCV.IplImage@,openCV.IplImage@)">
            <summary>
            EqualizeHist 
            Equalizes histogram of grayscale image 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMatchTemplate(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Int32)">
            <summary>
            MatchTemplate 
            Compares template against overlapped image regions 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMatchShapes(System.IntPtr,System.IntPtr,System.Int32,System.Double)">
            <summary>
            MatchShapes 
            Compares two shapes 
            </summary>
            <param name="object1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcEMD2(openCV.IplImage@,openCV.IplImage@,System.Int32,System.IntPtr,openCV.IplImage@,openCV.IplImage@,System.Single[],System.IntPtr)">
            <summary>
            CalcEMD2 
            Computes minimal work distance between two weighted point configurations 
            </summary>
            <param name="signature1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvApproxChains(openCV.CvSeq@,openCV.CvMemStorage@,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            ApproxChains 
            Approximates Freeman chain(s) with polygonal curve 
            </summary>
            <param name="src_seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvStartReadChainPoints(openCV.CvChain@,openCV.CvChainPtReader@)">
            <summary>
            StartReadChainPoints 
            Initializes chain reader 
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvApproxPoly(System.IntPtr,System.Int32,openCV.CvMemStorage@,System.Int32,System.Double,System.Int32)">
            <summary>
            ApproxPoly 
            Approximates polygonal curve(s) with desired precision 
            </summary>
            <param name="src_seq"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvBoundingRect(openCV.IplImage@,System.Int32)">
            <summary>
            BoundingRect 
            Calculates up-right bounding rectangle of point set 
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvContourArea(openCV.IplImage@,openCV.CvSlice)">
            <summary>
            ContourArea 
            Calculates area of the whole contour or contour section 
            </summary>
            <param name="contour"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvArcLength(System.IntPtr,openCV.CvSlice,System.Int32)">
            <summary>
            ArcLength 
            Calculates contour perimeter or curve length 
            </summary>
            <param name="curve"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateContourTree(openCV.CvSeq@,openCV.CvMemStorage@,System.Double)">
            <summary>
            CreateContourTree 
            Creates hierarchical representation of contour 
            </summary>
            <param name="contour"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvContourFromContourTree(openCV.CvContourTree@,openCV.CvMemStorage@,openCV.CvTermCriteria)">
            <summary>
            ContourFromContourTree 
            Restores contour from tree 
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMatchContourTrees(openCV.CvContourTree@,openCV.CvContourTree@,System.Int32,System.Double)">
            <summary>
            MatchContourTrees 
            Compares two contours using their tree representations 
            </summary>
            <param name="tree1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMaxRect(openCV.CvRect@,openCV.CvRect@)">
            <summary>
            MaxRect 
            Finds bounding rectangle for two given rectangles 
            </summary>
            <param name="rect1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPointSeqFromMat(System.Int32,openCV.IplImage@,openCV.CvContour@,openCV.CvSeqBlock@)">
            <summary>
            CvBox2D 
            Rotated 2D box 
            </summary>
            <param name="seq_kind"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvBoxPoints(openCV.CvBox2D,openCV.CvPoint2D32f)">
            <summary>
            BoxPoints 
            Finds box vertices 
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFitEllipse2(openCV.IplImage@)">
            <summary>
            FitEllipse 
            Fits ellipse to set of 2D points 
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFitLine(openCV.IplImage@,System.Int32,System.Double,System.Double,System.Double,System.Single[])">
            <summary>
            FitLine 
            Fits line to 2D or 3D point set 
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvConvexHull2(openCV.IplImage@,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            ConvexHull2 
            Finds convex hull of point set 
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCheckContourConvexity(openCV.IplImage@)">
            <summary>
            CheckContourConvexity 
            Tests contour convex 
            </summary>
            <param name="contour"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvConvexityDefects(openCV.IplImage@,openCV.IplImage@,openCV.CvMemStorage@)">
            <summary>
            CvConvexityDefect 
            Structure describing a single contour convexity detect 
            </summary>
            <param name="contour"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPointPolygonTest(openCV.IplImage@,openCV.CvPoint2D32f,System.Int32)">
            <summary>
            PointPolygonTest 
            Point in contour test 
            </summary>
            <param name="contour"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMinAreaRect2(openCV.IplImage@,openCV.CvMemStorage@)">
            <summary>
            MinAreaRect2 
            Finds circumscribed rectangle of minimal area for given 2D point set 
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMinEnclosingCircle(openCV.IplImage@,openCV.CvPoint2D32f@,System.Single[])">
            <summary>
            MinEnclosingCircle 
            Finds circumscribed circle of minimal area for given 2D point set 
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcPGH(openCV.CvSeq@,openCV.CvHistogram@)">
            <summary>
            CalcPGH 
            Calculates pair-wise geometrical histogram for contour 
            </summary>
            <param name="contour"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSubdiv2DRotateEdge(System.UInt32,System.Int32)">
            <summary>
            Subdiv2DRotateEdge 
            Returns another edge of the same quad-edge 
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.UintOrg(System.UInt32)">
            <summary>
            Subdiv2DEdgeOrg 
            Returns edge origin 
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.UintDst(System.UInt32)">
            <summary>
            Subdiv2DEdgeDst 
            Returns edge destination 
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateSubdivDelaunay2D(openCV.CvRect,openCV.CvMemStorage@)">
            <summary>
            CreateSubdivDelaunay2D 
            Creates empty Delaunay triangulation 
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSubdivDelaunay2DInsert(openCV.CvSubdiv2D@,openCV.CvPoint2D32f)">
            <summary>
            SubdivDelaunay2DInsert 
            Inserts a single point to Delaunay triangulation 
            </summary>
            <param name="subdiv"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSubdiv2DLocate(openCV.CvSubdiv2D@,openCV.CvPoint2D32f,System.UInt32@,openCV.CvSubdiv2DPoint@)">
            <summary>
            Subdiv2DLocate 
            Inserts a single point to Delaunay triangulation 
            </summary>
            <param name="subdiv"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFindNearestPoint2D(openCV.CvSubdiv2D@,openCV.CvPoint2D32f)">
            <summary>
            FindNearestPoint2D 
            Finds the closest subdivision vertex to given point 
            </summary>
            <param name="subdiv"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcSubdivVoronoi2D(openCV.CvSubdiv2D@)">
            <summary>
            CalcSubdivVoronoi2D 
            Calculates coordinates of Voronoi diagram cells 
            </summary>
            <param name="subdiv"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvClearSubdivVoronoi2D(openCV.CvSubdiv2D@)">
            <summary>
            ClearSubdivVoronoi2D 
            Removes all virtual points 
            </summary>
            <param name="subdiv"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvAcc(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            Acc 
            Adds frame to accumulator 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSquareAcc(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            SquareAcc 
            Adds the square of source image to accumulator 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMultiplyAcc(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            MultiplyAcc 
            Adds product of two input images to accumulator 
            </summary>
            <param name="image1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRunningAvg(openCV.IplImage@,openCV.IplImage@,System.Double,openCV.IplImage@)">
            <summary>
            RunningAvg 
            Updates running average 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvUpdateMotionHistory(openCV.IplImage@,openCV.IplImage@,System.Double,System.Double)">
            <summary>
            UpdateMotionHistory 
            Updates motion history image by moving silhouette 
            </summary>
            <param name="silhouette"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcMotionGradient(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Double,System.Double,System.Int32)">
            <summary>
            CalcMotionGradient 
            Calculates gradient orientation of motion history image 
            </summary>
            <param name="mhi"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcGlobalOrientation(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Double,System.Double)">
            <summary>
            CalcGlobalOrientation 
            Calculates global motion orientation of some selected region 
            </summary>
            <param name="orientation"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSegmentMotion(openCV.IplImage@,openCV.IplImage@,openCV.CvMemStorage@,System.Double,System.Double)">
            <summary>
            SegmentMotion 
            Segments whole motion into separate moving parts 
            </summary>
            <param name="mhi"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvMeanShift(openCV.IplImage@,openCV.CvRect,openCV.CvTermCriteria,openCV.CvConnectedComp@)">
            <summary>
            MeanShift 
            Finds object center on back projection 
            </summary>
            <param name="prob_image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCamShift(openCV.IplImage@,openCV.CvRect,openCV.CvTermCriteria,openCV.CvConnectedComp@,openCV.CvBox2D@)">
            <summary>
            CamShift 
            Finds object center, size, and orientation 
            </summary>
            <param name="prob_image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSnakeImage(openCV.IplImage@,System.IntPtr,System.Int32,System.Single[],System.Single[],System.Single[],System.Int32,openCV.CvSize,openCV.CvTermCriteria,System.Int32)">
            <summary>
            SnakeImage 
            Changes contour position to minimize its energy 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcOpticalFlowHS(openCV.IplImage@,openCV.IplImage@,System.Int32,openCV.IplImage@,openCV.IplImage@,System.Double,openCV.CvTermCriteria)">
            <summary>
            CalcOpticalFlowHS 
            Calculates optical flow for two images 
            </summary>
            <param name="prev"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcOpticalFlowLK(openCV.IplImage@,openCV.IplImage@,openCV.CvSize,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            CalcOpticalFlowLK 
            Calculates optical flow for two images 
            </summary>
            <param name="prev"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcOpticalFlowBM(openCV.IplImage@,openCV.IplImage@,openCV.CvSize,openCV.CvSize,openCV.CvSize,System.Int32,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            CalcOpticalFlowBM 
            Calculates optical flow for two images by block matching method 
            </summary>
            <param name="prev"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcOpticalFlowPyrLK(openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.IntPtr,System.IntPtr,System.Int32,openCV.CvSize,System.Int32,System.Byte[],System.Single[],openCV.CvTermCriteria,System.Int32)">
            <summary>
            CalcOpticalFlowPyrLK 
            Calculates optical flow for a sparse feature set using iterative Lucas-Kanade method in 
            pyramids 
            </summary>
            <param name="prev"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseKalman(openCV.CvKalman@)">
            <summary>
            ReleaseKalman 
            Deallocates Kalman filter structure 
            </summary>
            <param name="kalman"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvKalmanPredict(openCV.CvKalman@,openCV.CvMat@)">
            <summary>
            KalmanPredict 
            Estimates subsequent model state 
            </summary>
            <param name="kalman"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvKalmanCorrect(openCV.CvKalman@,openCV.CvMat@)">
            <summary>
            KalmanCorrect 
            Adjusts model state 
            </summary>
            <param name="kalman"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCreateConDensation(System.Int32,System.Int32,System.Int32)">
            <summary>
            CvConDensation 
            ConDenstation state 
            </summary>
            <param name="dynam_params"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseConDensation(openCV.CvConDensation@)">
            <summary>
            ReleaseConDensation 
            Deallocates ConDensation filter structure 
            </summary>
            <param name="condens"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvConDensInitSampleSet(openCV.CvConDensation@,openCV.CvMat@,openCV.CvMat@)">
            <summary>
            ConDensInitSampleSet 
            Initializes sample set for ConDensation algorithm 
            </summary>
            <param name="condens"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvConDensUpdateByTime(openCV.CvConDensation@)">
            <summary>
            ConDensUpdateByTime 
            Estimates subsequent model state 
            </summary>
            <param name="condens"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReleaseHaarClassifierCascade(openCV.CvHaarClassifierCascade@)">
            <summary>
            cvReleaseHaarClassifierCascade 
            Releases haar classifier cascade 
            </summary>
            <param name="cascade"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvHaarDetectObjects(openCV.IplImage@,openCV.CvHaarClassifierCascade@,openCV.CvMemStorage@,System.Double,System.Int32,System.Int32,openCV.CvSize)">
            <summary>
            cvHaarDetectObjects 
            Detects objects in the image 
            </summary>
            <param name="image"></param>
            <returns></returns>
            <summary>
            cvHaarDetectObjects 
            Detects objects in the image 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvSetImagesForHaarClassifierCascade(openCV.CvHaarClassifierCascade@,openCV.IplImage@,openCV.IplImage@,openCV.IplImage@,System.Double)">
            <summary>
            cvSetImagesForHaarClassifierCascade 
            Assigns images to the hidden cascade 
            </summary>
            <param name="cascade"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvProjectPoints2(openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@)">
            <summary>
            ProjectPoints2 
            Projects 3D points to image plane 
            </summary>
            <param name="object_points"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFindHomography(openCV.CvMat@,openCV.CvMat@,openCV.CvMat@)">
            <summary>
            FindHomography 
            Finds perspective transformation between two planes 
            </summary>
            <param name="src_points"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalibrateCamera2(openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvSize,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,System.Int32)">
            <summary>
            CalibrateCamera2 
            Finds intrinsic and extrinsic camera parameters using calibration pattern 
            </summary>
            <param name="object_points"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFindExtrinsicCameraParams2(openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,openCV.CvMat@)">
            <summary>
            FindExtrinsicCameraParams2 
            Finds extrinsic camera parameters for particular view 
            </summary>
            <param name="object_points"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvRodrigues2(openCV.CvMat@,openCV.CvMat@,openCV.CvMat@)">
            <summary>
            Rodrigues2 
            Converts rotation matrix to rotation vector or vice versa 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvUndistort2(openCV.IplImage@,openCV.IplImage@,openCV.CvMat@,openCV.CvMat@)">
            <summary>
            Undistort2 
            Transforms image to compensate lens distortion 
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvInitUndistortMap(openCV.CvMat@,openCV.CvMat@,openCV.IplImage@,openCV.IplImage@)">
            <summary>
            InitUndistortMap 
            Computes undistorion map 
            </summary>
            <param name="intrinsic_matrix"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFindChessboardCorners(openCV.IplImage@,openCV.CvSize,System.IntPtr,System.Int32@,System.Int32)">
            <summary>
            FindChessboardCorners 
            Finds positions of internal corners of the chessboard 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvDrawChessboardCorners(openCV.IplImage@,openCV.CvSize,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            DrawChessBoardCorners 
            Renders the detected chessboard corners 
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCreatePOSITObject(openCV.CvPoint3D32f@,System.Int32)">
            <summary>
            CreatePOSITObject 
            Initializes structure containing object information 
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvPOSIT(openCV.CvPOSITObject@,openCV.CvPoint2D32f@,System.Double,openCV.CvTermCriteria,System.Single[],System.Single[])">
            <summary>
            POSIT 
            Implements POSIT algorithm 
            </summary>
            <param name="posit_object"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvReleasePOSITObject(openCV.CvPOSITObject@)">
            <summary>
            ReleasePOSITObject 
            Deallocates 3D object structure 
            </summary>
            <param name="posit_object"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvCalcImageHomography(System.Single[],openCV.CvPoint3D32f@,System.Single[],System.Single[])">
            <summary>
            CalcImageHomography 
            Calculates homography matrix for oblong planar object (e g arm) 
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvFindFundamentalMat(openCV.CvMat@,openCV.CvMat@,openCV.CvMat@,System.Int32,System.Double,System.Double,openCV.CvMat@)">
            <summary>
            FindFundamentalMat 
            Calculates fundamental matrix from corresponding points in two images 
            </summary>
            <param name="points1"></param>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CvComputeCorrespondEpilines(openCV.CvMat@,System.Int32,openCV.CvMat@,openCV.CvMat@)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:openCV.cvlib.CV_NEXT_SEQ_ELEM(System.Int32,openCV.CvSeqReader@)">
            * move reader position forward */
        </member>
        <member name="T:openCV.CvCapture">
            Black box cvcapture
        </member>
        <member name="T:openCV.CvMoments">
            * spatial and central moments */
        </member>
        <member name="T:openCV.CvPoint">
            <summary>
            2D point with integer coordinates
            </summary>
        </member>
        <member name="F:openCV.CvPoint.x">
            <summary>
            x-coordinate
            </summary>
        </member>
        <member name="F:openCV.CvPoint.y">
            <summary>
            y-coordinate
            </summary>
        </member>
        <member name="M:openCV.CvPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="x">x-coordinate</param>
            <param name="y">y-coordinate</param>
        </member>
        <member name="T:openCV.CvPoint2D32f">
            <summary>
            2D point with floating-point coordinates
            </summary>
        </member>
        <member name="F:openCV.CvPoint2D32f.x">
            <summary>
            x-coordinate of the point
            </summary>
        </member>
        <member name="F:openCV.CvPoint2D32f.y">
            <summary>
            y-coordinate of the point
            </summary>
        </member>
        <member name="M:openCV.CvPoint2D32f.#ctor(System.Int32,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="x">x-coordinate</param>
            <param name="y">y-coordinate</param>
        </member>
        <member name="T:openCV.CvPoint3D32f">
            <summary>
            D point with floating-point coordinates
            </summary>
        </member>
        <member name="F:openCV.CvPoint3D32f.x">
            <summary>
            x-coordinate of the point
            </summary>
        </member>
        <member name="F:openCV.CvPoint3D32f.y">
            <summary>
            y-coordinate of the point
            </summary>
        </member>
        <member name="F:openCV.CvPoint3D32f.z">
            <summary>
            y-coordinate of the point
            </summary>
        </member>
        <member name="M:openCV.CvPoint3D32f.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Contructor
            </summary>
            <param name="x">x-coordinate</param>
            <param name="y">y-coordinate</param>
            <param name="z">z-coordinate</param>
        </member>
        <member name="T:openCV.CvPoint2D64f">
            <summary>
            2D point with double precision floating-point coordinates
            </summary>
        </member>
        <member name="F:openCV.CvPoint2D64f.x">
            <summary>
            x-coordinate
            </summary>
        </member>
        <member name="F:openCV.CvPoint2D64f.y">
            <summary>
            y-coordinate
            </summary>
        </member>
        <member name="M:openCV.CvPoint2D64f.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x">x-coordinate</param>
            <param name="y">y-coordinate</param>
        </member>
        <member name="T:openCV.CvPoint3D64f">
            <summary>
            3D point with double precision floating-point coordinates
            </summary>
        </member>
        <member name="F:openCV.CvPoint3D64f.x">
            <summary>
            x-coordinate
            </summary>
        </member>
        <member name="F:openCV.CvPoint3D64f.y">
            <summary>
            y-coordinate
            </summary>
        </member>
        <member name="F:openCV.CvPoint3D64f.z">
            <summary>
            z-coordinate
            </summary>
        </member>
        <member name="M:openCV.CvPoint3D64f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">x-coordinate</param>
            <param name="y">y-coordinate</param>
            <param name="z">z-coordinate</param>
        </member>
        <member name="T:openCV.CvSize">
            <summary>
            pixel accurate size of a rectangle
            </summary>
        </member>
        <member name="F:openCV.CvSize.width">
            <summary>
            width of the rectangle
            </summary>
        </member>
        <member name="F:openCV.CvSize.height">
            <summary>
            height of the rectangle
            </summary>
        </member>
        <member name="M:openCV.CvSize.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="width">width of the rectangle</param>
            <param name="height">height of the rectangle</param>
        </member>
        <member name="T:openCV.CvSize2D32f">
            <summary>
            sub-pixel accurate size of a rectangle
            </summary>
        </member>
        <member name="F:openCV.CvSize2D32f.width">
            <summary>
            width of the rectangle
            </summary>
        </member>
        <member name="F:openCV.CvSize2D32f.height">
            <summary>
            height of the rectangle
            </summary>
        </member>
        <member name="M:openCV.CvSize2D32f.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="width">width of the rectangle</param>
            <param name="height">height of the rectangle</param>
        </member>
        <member name="T:openCV.CvRect">
            <summary>
            offset and size of a rectangle
            </summary>
        </member>
        <member name="F:openCV.CvRect.x">
            <summary>
            x-coordinate of the left-most rectangle corner[s]
            </summary>
        </member>
        <member name="F:openCV.CvRect.y">
            <summary>
            y-coordinate of the top-most or bottom-most rectangle corner[s]
            </summary>
        </member>
        <member name="F:openCV.CvRect.width">
            <summary>
            width of the rectangle
            </summary>
        </member>
        <member name="F:openCV.CvRect.height">
            <summary>
            height of the rectangle
            </summary>
        </member>
        <member name="M:openCV.CvRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x">x-coordinate of the left-most rectangle corner[s]</param>
            <param name="y">y-coordinate of the top-most or bottom-most rectangle corner[s]</param>
            <param name="width">width of the rectangle</param>
            <param name="height">height of the rectangle</param>
        </member>
        <member name="T:openCV.CvScalar">
            <summary>
            A container for 1-,2-,3- or 4-tuples of numbers
            </summary>
        </member>
        <member name="F:openCV.CvScalar.val1">
            <summary>
            value 1
            </summary>
        </member>
        <member name="F:openCV.CvScalar.val2">
            <summary>
            value 2
            </summary>
        </member>
        <member name="F:openCV.CvScalar.val3">
            <summary>
            value 3
            </summary>
        </member>
        <member name="F:openCV.CvScalar.val4">
            <summary>
            value 4
            </summary>
        </member>
        <member name="M:openCV.CvScalar.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="v1">value 1</param>
            <param name="v2">value 2</param>
            <param name="v3">value 3</param>
            <param name="v4">value 4</param>
        </member>
        <member name="T:openCV.CvTermCriteria">
            <summary>
            Termination criteria for iterative algorithms
            </summary>
        </member>
        <member name="F:openCV.CvTermCriteria.type">
            <summary>
            may be combination of
            CV_TERMCRIT_ITER 
            CV_TERMCRIT_EPS
            </summary>
        </member>
        <member name="F:openCV.CvTermCriteria.max_iter">
            <summary>
            maximum number of iterations
            </summary>
        </member>
        <member name="F:openCV.CvTermCriteria.epsilon">
            <summary>
            accuracy to achieve
            </summary>
        </member>
        <member name="M:openCV.CvTermCriteria.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Constructor
            check termination criteria and transform it so that type=CV_TERMCRIT_ITER+CV_TERMCRIT_EPS,
            and both max_iter and epsilon are valid
            </summary>
            <param name="type"> may be combination of
            CV_TERMCRIT_ITER 
            CV_TERMCRIT_EPS</param>
            <param name="max_iter">maximum number of iterations</param>
            <param name="epsilon">accuracy to achieve</param>
        </member>
        <member name="T:openCV.CvMat">
            <summary>
            Multi-channel matrix
            </summary>
        </member>
        <member name="F:openCV.CvMat.type">
            <summary>
            CvMat signature (CV_MAT_MAGIC_VAL), element type and flags
            </summary>
        </member>
        <member name="F:openCV.CvMat.step">
            <summary>
            full row length in bytes
            </summary>
        </member>
        <member name="F:openCV.CvMat.refcount">
            <summary>
            for internal use only
            </summary>
        </member>
        <member name="F:openCV.CvMat.hdr_refcount">
            <summary>
            for internal use only
            </summary>
        </member>
        <member name="F:openCV.CvMat.data">
            <summary>
            underlaying data pointer
            </summary>
        </member>
        <member name="F:openCV.CvMat.rows">
            <summary>
            number of rows
            </summary>
        </member>
        <member name="F:openCV.CvMat.height">
            <summary>
            number of rows
            </summary>
        </member>
        <member name="F:openCV.CvMat.cols">
            <summary>
            number of columns
            </summary>
        </member>
        <member name="F:openCV.CvMat.width">
            <summary>
            number of columns
            </summary>
        </member>
        <member name="F:openCV.CvMat.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.Dim">
            <summary>
            pairs (number of elements, distance between elements in bytes) for every dimension
            </summary>
        </member>
        <member name="F:openCV.Dim.size">
            <summary>
            size
            </summary>
        </member>
        <member name="F:openCV.Dim.step">
            <summary>
            step
            </summary>
        </member>
        <member name="T:openCV.CvMatND">
            <summary>
            Multi-dimensional dense multi-channel array
            </summary>
        </member>
        <member name="F:openCV.CvMatND.type">
            <summary>
            CvMatND signature (CV_MATND_MAGIC_VAL), element type and flags
            </summary>
        </member>
        <member name="F:openCV.CvMatND.dims">
            <summary>
            number of array dimensions
            </summary>
        </member>
        <member name="F:openCV.CvMatND.refcount">
            <summary>
            for internal use only
            </summary>
        </member>
        <member name="F:openCV.CvMatND.hdr_refcount">
            <summary>
            for internal use only
            </summary>
        </member>
        <member name="F:openCV.CvMatND.data">
            <summary>
            underlaying data pointer
            </summary>
        </member>
        <member name="F:openCV.CvMatND.dim">
            <summary>
            pairs (number of elements, distance between elements in bytes) for every dimension 
            </summary>
        </member>
        <member name="F:openCV.CvMatND.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvSparseMat">
            <summary>
            Multi-dimensional sparse multi-channel array
            </summary>
        </member>
        <member name="F:openCV.CvSparseMat.type">
            <summary>
            CvSparseMat signature (CV_SPARSE_MAT_MAGIC_VAL), element type and flags
            </summary>
        </member>
        <member name="F:openCV.CvSparseMat.dims">
            <summary>
            number of dimensions
            </summary>
        </member>
        <member name="F:openCV.CvSparseMat.refcount">
            <summary>
            reference counter - not used
            </summary>
        </member>
        <member name="F:openCV.CvSparseMat.hdr_refcount">
            <summary>
            hdr reference counter - not used
            </summary>
        </member>
        <member name="F:openCV.CvSparseMat.heap">
            <summary>
            a pool of hashtable nodes
            </summary>
        </member>
        <member name="F:openCV.CvSparseMat.hashtable">
            <summary>
            hashtable: each entry has a list of nodes
            having the same "hashvalue modulo hashsize"
            </summary>
        </member>
        <member name="F:openCV.CvSparseMat.hashsize">
            <summary>
            total number of sparse array nodes
            </summary>
        </member>
        <member name="F:openCV.CvSparseMat.valoffset">
            <summary>
            value offset in bytes for the array nodes
            </summary>
        </member>
        <member name="F:openCV.CvSparseMat.idxoffset">
            <summary>
            index offset in bytes for the array nodes
            </summary>
        </member>
        <member name="F:openCV.CvSparseMat.size">
            <summary>
            arr of dimension sizes
            </summary>
        </member>
        <member name="F:openCV.CvSparseMat.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.IplImage">
            <summary>
            Ipl Image structure
            </summary>
        </member>
        <member name="F:openCV.IplImage.nSize">
            <summary>
            sizeof(IplImage) 
            </summary>
        </member>
        <member name="F:openCV.IplImage.ID">
            <summary>
            version (=0)
            </summary>
        </member>
        <member name="F:openCV.IplImage.nChannels">
            <summary>
            Most of OpenCV functions support 1,2,3 or 4 channels 
            </summary>
        </member>
        <member name="F:openCV.IplImage.alphaChannel">
            <summary>
            ignored by OpenCV 
            </summary>
        </member>
        <member name="F:openCV.IplImage.depth">
            <summary>
            pixel depth in bits: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16U, IPL_DEPTH_16S, IPL_DEPTH_32S, IPL_DEPTH_32F and IPL_DEPTH_64F are supported 
            </summary>
        </member>
        <member name="F:openCV.IplImage.colorModel">
            <summary>
            ignored by OpenCV 
            </summary>
        </member>
        <member name="F:openCV.IplImage.channelSeq">
            <summary>
            ditto
            </summary>
        </member>
        <member name="F:openCV.IplImage.dataOrder">
            <summary>
            0 - interleaved color channels, 1 - separate color channels.
            cvCreateImage can only create interleaved images 
            </summary>
        </member>
        <member name="F:openCV.IplImage.origin">
            <summary>
            0 - top-left origin,
            1 - bottom-left origin (Windows bitmaps style)
            </summary>
        </member>
        <member name="F:openCV.IplImage.align">
            <summary>
            Alignment of image rows (4 or 8).
            OpenCV ignores it and uses widthStep instead 
            </summary>
        </member>
        <member name="F:openCV.IplImage.width">
            <summary>
            image width in pixels 
            </summary>
        </member>
        <member name="F:openCV.IplImage.height">
            <summary>
            image height in pixels 
            </summary>
        </member>
        <member name="F:openCV.IplImage.roi">
            <summary>
            image ROI. when it is not NULL, this specifies image region to process 
            </summary>
        </member>
        <member name="F:openCV.IplImage.maskROI">
            <summary>
            must be NULL in OpenCV 
            </summary>
        </member>
        <member name="F:openCV.IplImage.imageId">
            <summary>
            ditto
            </summary>
        </member>
        <member name="F:openCV.IplImage.tileInfo">
            <summary>
            ditto 
            </summary>
        </member>
        <member name="F:openCV.IplImage.imageSize">
            <summary>
            image data size in bytes
            (=image->height*image->widthStep in case of interleaved data)
            </summary>
        </member>
        <member name="F:openCV.IplImage.imageData">
            <summary>
            pointer to aligned image data 
            </summary>
        </member>
        <member name="F:openCV.IplImage.widthStep">
            <summary>
            size of aligned image row in bytes 
            </summary>
        </member>
        <member name="F:openCV.IplImage.BorderMode">
            <summary>
            border completion mode, ignored by OpenCV 
            </summary>
        </member>
        <member name="F:openCV.IplImage.BorderConst">
            <summary>
            ditto
            </summary>
        </member>
        <member name="F:openCV.IplImage.imageDataOrigin">
            <summary>
             pointer to a very origin of image data (not necessarily aligned) - it is needed for correct image deallocation 
            </summary>
        </member>
        <member name="F:openCV.IplImage.ptr">
            <summary>
            Pointer to the unmanaged memory
            </summary>
        </member>
        <member name="M:openCV.IplImage.op_Explicit(openCV.IplImage)~System.Drawing.Bitmap">
            <summary>
            Converts this to Bitmap
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="T:openCV.CvMemBlock">
            <summary>
            The structure CvMemBlock represents a single 
            lock of memory storage. Actual data of the memory 
            blocks follows the header, that is, the i-th byte 
            of the memory block can be retrieved with the 
            expression ((char*)(mem_block_ptr+1))[i]. However, 
            normally there is no need to access the storage structure 
            fields directly.
            </summary>
        </member>
        <member name="F:openCV.CvMemBlock.prev">
            <summary>
            Previus
            </summary>
        </member>
        <member name="F:openCV.CvMemBlock.next">
            <summary>
            Next
            </summary>
        </member>
        <member name="T:openCV.CvMemStorage">
            <summary>
            Growing memory storage
            </summary>
        </member>
        <member name="F:openCV.CvMemStorage.signature">
            <summary>
            internal signature
            </summary>
        </member>
        <member name="F:openCV.CvMemStorage.bottom">
            <summary>
            first allocated block
            </summary>
        </member>
        <member name="F:openCV.CvMemStorage.top">
            <summary>
            current memory block - top of the stack
            </summary>
        </member>
        <member name="F:openCV.CvMemStorage.parent">
            <summary>
            borrows new blocks from
            </summary>
        </member>
        <member name="F:openCV.CvMemStorage.block_size">
            <summary>
            block size
            </summary>
        </member>
        <member name="F:openCV.CvMemStorage.free_space">
            <summary>
            free space in the current block
            </summary>
        </member>
        <member name="F:openCV.CvMemStorage.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvMemStoragePos">
            <summary>
            The structure described below stores the position 
            of the stack top that can be saved via 
            cvSaveMemStoragePos and restored via cvRestoreMemStoragePos.
            </summary>
        </member>
        <member name="F:openCV.CvMemStoragePos.top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:openCV.CvMemStoragePos.free_space">
            <summary>
            Free space
            </summary>
        </member>
        <member name="T:openCV.CvString">
            <summary>
            Allocates text string in the storage
            </summary>
        </member>
        <member name="F:openCV.CvString.len">
            <summary>
            Length of the string (w/o \'0')
            </summary>
        </member>
        <member name="F:openCV.CvString.ptr">
            <summary>
            this ptr
            </summary>
        </member>
        <member name="T:openCV.CvSeq">
            <summary>
            Growable sequence of elements
            </summary>
        </member>
        <member name="F:openCV.CvSeq.flags">
            <summary>
            micsellaneous flags
            </summary>
        </member>
        <member name="F:openCV.CvSeq.header_size">
            <summary>
            size of sequence header
            </summary>
        </member>
        <member name="F:openCV.CvSeq.h_prev">
            <summary>
            previous sequence
            </summary>
        </member>
        <member name="F:openCV.CvSeq.h_next">
            <summary>
            next sequence
            </summary>
        </member>
        <member name="F:openCV.CvSeq.v_prev">
            <summary>
            2nd previous sequence
            </summary>
        </member>
        <member name="F:openCV.CvSeq.v_next">
            <summary>
            2nd next sequence
            </summary>
        </member>
        <member name="F:openCV.CvSeq.total">
            <summary>
            total number of elements
            </summary>
        </member>
        <member name="F:openCV.CvSeq.elem_size">
            <summary>
            size of sequence element in bytes
            </summary>
        </member>
        <member name="F:openCV.CvSeq.block_max">
            <summary>
            maximal bound of the last block
            </summary>
        </member>
        <member name="F:openCV.CvSeq.pt">
            <summary>
            current write pointer
            [this name was changed, because the this pointer]
            </summary>
        </member>
        <member name="F:openCV.CvSeq.delta_elems">
            <summary>
            how many elements allocated when the seq grows
            </summary>
        </member>
        <member name="F:openCV.CvSeq.storage">
            <summary>
            where the seq is stored
            </summary>
        </member>
        <member name="F:openCV.CvSeq.free_blocks">
            <summary>
            free blocks list
            </summary>
        </member>
        <member name="F:openCV.CvSeq.first">
            <summary>
            pointer to the first sequence block
            </summary>
        </member>
        <member name="F:openCV.CvSeq.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvSeqBlock">
            <summary>
            Continuous sequence block
            </summary>
        </member>
        <member name="F:openCV.CvSeqBlock.prev">
            <summary>
            previous sequence block
            </summary>
        </member>
        <member name="F:openCV.CvSeqBlock.next">
            <summary>
            next sequence block
            </summary>
        </member>
        <member name="F:openCV.CvSeqBlock.start_index">
            <summary>
            index of the first element in the block +
            sequence->first->start_index
            </summary>
        </member>
        <member name="F:openCV.CvSeqBlock.count">
            <summary>
            number of elements in the block
            </summary>
        </member>
        <member name="F:openCV.CvSeqBlock.data">
            <summary>
            pointer to the first element of the block
            </summary>
        </member>
        <member name="F:openCV.CvSeqBlock.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvSlice">
            <summary>
            A sequence slice
            </summary>
        </member>
        <member name="F:openCV.CvSlice.start_index">
            <summary>
            Start Index
            </summary>
        </member>
        <member name="F:openCV.CvSlice.end_index">
            <summary>
            End Index
            </summary>
        </member>
        <member name="M:openCV.CvSlice.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="start_index">Start Index</param>
            <param name="end_index">End Index</param>
        </member>
        <member name="T:openCV.CvSetElem">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:openCV.CvSetElem.flags">
            <summary>
            flags
            </summary>
        </member>
        <member name="F:openCV.CvSetElem.next_free">
            <summary>
            next_free
            </summary>
        </member>
        <member name="F:openCV.CvSetElem.ptr">
            <summary>
            ptr
            </summary>
        </member>
        <member name="T:openCV.CvSet">
            <summary>
            Collection of nodes
            </summary>
        </member>
        <member name="F:openCV.CvSet.flags">
            <summary>
            micsellaneous flags
            </summary>
        </member>
        <member name="F:openCV.CvSet.header_size">
            <summary>
            size of sequence header
            </summary>
        </member>
        <member name="F:openCV.CvSet.h_prev">
            <summary>
            previous sequence
            </summary>
        </member>
        <member name="F:openCV.CvSet.h_next">
            <summary>
            next sequence
            </summary>
        </member>
        <member name="F:openCV.CvSet.v_prev">
            <summary>
            2nd previous sequence
            </summary>
        </member>
        <member name="F:openCV.CvSet.v_next">
            <summary>
            2nd next sequence
            </summary>
        </member>
        <member name="F:openCV.CvSet.total">
            <summary>
            total number of elements
            </summary>
        </member>
        <member name="F:openCV.CvSet.elem_size">
            <summary>
            size of sequence element in bytes
            </summary>
        </member>
        <member name="F:openCV.CvSet.block_max">
            <summary>
            maximal bound of the last block
            </summary>
        </member>
        <member name="F:openCV.CvSet.pt">
            <summary>
            current write pointer
            </summary>
        </member>
        <member name="F:openCV.CvSet.delta_elems">
            <summary>
            how many elements allocated when the seq grows
            </summary>
        </member>
        <member name="F:openCV.CvSet.storage">
            <summary>
            where the seq is stored
            </summary>
        </member>
        <member name="F:openCV.CvSet.free_blocks">
            <summary>
            free blocks list
            </summary>
        </member>
        <member name="F:openCV.CvSet.first">
            <summary>
            pointer to the first sequence block
            </summary>
        </member>
        <member name="F:openCV.CvSet.free_elems">
            <summary>
            free elements
            </summary>
        </member>
        <member name="F:openCV.CvSet.active_count">
            <summary>
            active count
            </summary>
        </member>
        <member name="F:openCV.CvSet.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvGraphVtx">
            <summary>
            A graph vertex
            </summary>
        </member>
        <member name="F:openCV.CvGraphVtx.flags">
            <summary>
            vertex flags
            </summary>
        </member>
        <member name="F:openCV.CvGraphVtx.first">
            <summary>
            the first incident edge
            </summary>
        </member>
        <member name="F:openCV.CvGraphVtx.pt">
            <summary>
            Internal data pointer
            </summary>
        </member>
        <member name="F:openCV.CvGraphVtx.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvGraphEdge">
            <summary>
            Graph Edge
            </summary>
        </member>
        <member name="F:openCV.CvGraphEdge.flags">
            <summary>
            edge flags
            </summary>
        </member>
        <member name="F:openCV.CvGraphEdge.weight">
            <summary>
            edge weight
            </summary>
        </member>
        <member name="F:openCV.CvGraphEdge.next">
            <summary>
            the next edges in the incidence lists for staring (0) and ending (1) vertices
            </summary>
        </member>
        <member name="F:openCV.CvGraphEdge.vtx">
            <summary>
            the starting (0) and ending (1) vertices
            </summary>
        </member>
        <member name="F:openCV.CvGraphEdge.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvGraph">
            <summary>
            Oriented or unoriented weigted graph
            </summary>
        </member>
        <member name="F:openCV.CvGraph.flags">
            <summary>
            micsellaneous flags
            </summary>
        </member>
        <member name="F:openCV.CvGraph.header_size">
            <summary>
            size of sequence header
            </summary>
        </member>
        <member name="F:openCV.CvGraph.h_prev">
            <summary>
            previous sequence
            </summary>
        </member>
        <member name="F:openCV.CvGraph.h_next">
            <summary>
            next sequence
            </summary>
        </member>
        <member name="F:openCV.CvGraph.v_prev">
            <summary>
            2nd previous sequence
            </summary>
        </member>
        <member name="F:openCV.CvGraph.v_next">
            <summary>
            2nd next sequence
            </summary>
        </member>
        <member name="F:openCV.CvGraph.total">
            <summary>
            total number of elements
            </summary>
        </member>
        <member name="F:openCV.CvGraph.elem_size">
            <summary>
            size of sequence element in bytes
            </summary>
        </member>
        <member name="F:openCV.CvGraph.block_max">
            <summary>
            maximal bound of the last block
            </summary>
        </member>
        <member name="F:openCV.CvGraph.pt">
            <summary>
            current write pointer
            </summary>
        </member>
        <member name="F:openCV.CvGraph.delta_elems">
            <summary>
            how many elements allocated when the seq grows
            </summary>
        </member>
        <member name="F:openCV.CvGraph.storage">
            <summary>
            where the seq is stored
            </summary>
        </member>
        <member name="F:openCV.CvGraph.free_blocks">
            <summary>
            free blocks list
            </summary>
        </member>
        <member name="F:openCV.CvGraph.first">
            <summary>
            pointer to the first sequence block
            </summary>
        </member>
        <member name="F:openCV.CvGraph.free_elems">
            <summary>
            internal use
            </summary>
        </member>
        <member name="F:openCV.CvGraph.active_count">
            <summary>
            internal use
            </summary>
        </member>
        <member name="F:openCV.CvGraph.edges">
            <summary>
            Set of edges
            </summary>
        </member>
        <member name="F:openCV.CvGraph.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvGraphScanner">
            <summary>
            Graph traversal state
            </summary>
        </member>
        <member name="F:openCV.CvGraphScanner.vtx">
            <summary>
            current graph vertex (or current edge origin)
            </summary>
        </member>
        <member name="F:openCV.CvGraphScanner.dst">
            <summary>
            current graph edge destination vertex
            </summary>
        </member>
        <member name="F:openCV.CvGraphScanner.edge">
            <summary>
            current edge
            </summary>
        </member>
        <member name="F:openCV.CvGraphScanner.graph">
            <summary>
            the graph
            </summary>
        </member>
        <member name="F:openCV.CvGraphScanner.stack">
            <summary>
            the graph vertex stack
            </summary>
        </member>
        <member name="F:openCV.CvGraphScanner.index">
            <summary>
            the lower bound of certainly visited vertices
            </summary>
        </member>
        <member name="F:openCV.CvGraphScanner.mask">
            <summary>
            event mask
            </summary>
        </member>
        <member name="F:openCV.CvGraphScanner.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvTreeNodeIterator">
            <summary>
            Opens existing or creates new file storage
            </summary>
        </member>
        <member name="F:openCV.CvTreeNodeIterator.node">
            <summary>
            node
            </summary>
        </member>
        <member name="F:openCV.CvTreeNodeIterator.level">
            <summary>
            level
            </summary>
        </member>
        <member name="F:openCV.CvTreeNodeIterator.max_level">
            <summary>
            max_level
            </summary>
        </member>
        <member name="F:openCV.CvTreeNodeIterator.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvFileStorage">
            <summary>
            File Storage
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.flags">
            <summary>
            flags
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.is_xml">
            <summary>
            is_xml
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.write_mode">
            <summary>
            write_mode
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.is_first">
            <summary>
            is_first
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.memstorage">
            <summary>
            memstorage
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.dststorage">
            <summary>
            dststorage
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.strstorage">
            <summary>
            strstorage
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.str_hash">
            <summary>
            str_hash
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.roots">
            <summary>
            roots
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.write_stack">
            <summary>
            write_stack
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.struct_indent">
            <summary>
            struct_indent
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.struct_flags">
            <summary>
            struct_flags
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.struct_tag">
            <summary>
            struct_tag
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.space">
            <summary>
            space
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.filename">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.file">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.buffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.buffer_start">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.buffer_end">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.wrap_margin">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.lineno">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.dummy_eof">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.errmsg">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.errmsgbuf">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.start_write_struct">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.end_write_struct">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.write_int">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.write_real">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.write_string">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.write_comment">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.start_next_stream">
            <summary>
            
            </summary>
        </member>
        <member name="F:openCV.CvFileStorage.ptr">
            <summary>
            
            </summary>
        </member>
        <member name="T:openCV.CvStringHashNode">
            <summary>
            all the keys (names) of elements in the readed file storage
            are stored in the hash to speed up the lookup operations
            </summary>
        </member>
        <member name="F:openCV.CvStringHashNode.hashval">
            <summary>
            hashval
            </summary>
        </member>
        <member name="F:openCV.CvStringHashNode.str">
            <summary>
            str
            </summary>
        </member>
        <member name="F:openCV.CvStringHashNode.next">
            <summary>
            next
            </summary>
        </member>
        <member name="F:openCV.CvStringHashNode.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvFileNode">
            <summary>
            basic element of the file storage - scalar or collection
            </summary>
        </member>
        <member name="F:openCV.CvFileNode.tag">
            <summary>
            Tag info
            </summary>
        </member>
        <member name="F:openCV.CvFileNode.info">
            <summary>
            type information (only for user-defined object, for others it is 0)
            </summary>
        </member>
        <member name="F:openCV.CvFileNode.data">
            <summary>
            Data pointer:
            {
               double f; /* scalar floating-point number */
               int i;    /* scalar integer number */
               CvString str; /* text string */
               CvSeq* seq; /* sequence (ordered collection of file nodes) */
               CvFileNodeHash* map; /* map (collection of named file nodes) */
            } data;
            </summary>
        </member>
        <member name="F:openCV.CvFileNode.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvAttrList">
            <summary>
            List of attributes
            </summary>
        </member>
        <member name="F:openCV.CvAttrList.attr">
            <summary>
            NULL-terminated array of (attribute_name,attribute_value) pairs 
            </summary>
        </member>
        <member name="F:openCV.CvAttrList.next">
            <summary>
            pointer to next chunk of the attributes list
            </summary>
        </member>
        <member name="F:openCV.CvAttrList.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.CvTypeInfo">
            <summary>
            Type information
            </summary>
        </member>
        <member name="F:openCV.CvTypeInfo.flags">
            <summary>
            not used
            </summary>
        </member>
        <member name="F:openCV.CvTypeInfo.header_size">
            <summary>
            sizeof(CvTypeInfo)
            </summary>
        </member>
        <member name="F:openCV.CvTypeInfo.prev">
            <summary>
            previous registered type in the list
            </summary>
        </member>
        <member name="F:openCV.CvTypeInfo.next">
            <summary>
            not documented
            </summary>
        </member>
        <member name="F:openCV.CvTypeInfo.type_name">
            <summary>
            next registered type in the list
            </summary>
        </member>
        <member name="F:openCV.CvTypeInfo.pt">
            <summary>
            not documentd
            </summary>
        </member>
        <member name="F:openCV.CvTypeInfo.is_instance">
            <summary>
            checks if the passed object belongs to the type
            </summary>
        </member>
        <member name="F:openCV.CvTypeInfo.release">
            <summary>
            releases object (memory etc.)
            </summary>
        </member>
        <member name="F:openCV.CvTypeInfo.read">
            <summary>
            reads object from file storage
            </summary>
        </member>
        <member name="F:openCV.CvTypeInfo.write">
            <summary>
            reads object from file storage
            </summary>
        </member>
        <member name="F:openCV.CvTypeInfo.clone">
            <summary>
            creates a copy of the object
            </summary>
        </member>
        <member name="F:openCV.CvTypeInfo.ptr">
            <summary>
            this pointer
            </summary>
        </member>
        <member name="T:openCV.IplTileInfo">
            <summary>
            Internal used Structure
            </summary>
        </member>
        <member name="T:openCV.cvtools">
            <summary>
            CvTools adds support for data type conversion
            between managed and unmanaged memory and vise versa
            </summary>
        </member>
        <member name="M:openCV.cvtools.Convert2DArrToPtr(System.Byte[][],System.Runtime.InteropServices.GCHandle[]@)">
            <summary>
            Converts a Jagged Array (array of arrays) to an IntPtr.
            The array can read and/or written in unmanaged dll.
            Internal memory managements expects to release the
            resourses after using. Simply make a variable GCHandel[] h
            without initalisation and pass to the function. After using 
            simply call ReleaseHandels(h).
            </summary>
            <param name="arr">2d Jagged Array</param>
            <param name="handles">Handle</param>
            <returns>IntPtr, like byte**</returns>
        </member>
        <member name="M:openCV.cvtools.Convert2DArrToPtr(System.Int32[][],System.Runtime.InteropServices.GCHandle[]@)">
            <summary>
            Converts a Jagged Array (array of arrays) to an IntPtr.
            The array can read and/or written in unmanaged dll.
            Internal memory managements expects to release the
            resourses after using. Simply make a variable GCHandel[] h
            without initalisation and pass to the function. After using 
            simply call ReleaseHandels(h).
            </summary>
            <param name="arr">2d Jagged Array</param>
            <param name="handles">Handle</param>
            <returns>IntPtr, like int**</returns>
        </member>
        <member name="M:openCV.cvtools.Convert2DArrToPtr(System.Single[][],System.Runtime.InteropServices.GCHandle[]@)">
            <summary>
            Converts a Jagged Array (array of arrays) to an IntPtr.
            The array can read and/or written in unmanaged dll.
            Internal memory managements expects to release the
            resourses after using. Simply make a variable GCHandel[] h
            without initalisation and pass to the function. After using 
            simply call ReleaseHandels(h).
            </summary>
            <param name="arr">2d Jagged Array</param>
            <param name="handles">Handle</param>
            <returns>IntPtr, like float**</returns>
        </member>
        <member name="M:openCV.cvtools.Convert2DArrToPtr(System.Double[][],System.Runtime.InteropServices.GCHandle[]@)">
            <summary>
            Converts a Jagged Array (array of arrays) to an IntPtr.
            The array can read and/or written in unmanaged dll.
            Internal memory managements expects to release the
            resourses after using. Simply make a variable GCHandel[] h
            without initalisation and pass to the function. After using 
            simply call ReleaseHandels(h).
            </summary>
            <param name="arr">2d Jagged Array</param>
            <param name="handles">Handle</param>
            <returns>IntPtr, like double**</returns>
        </member>
        <member name="M:openCV.cvtools.Convert2DArrToPtr(openCV.CvPoint[][],System.Runtime.InteropServices.GCHandle[]@)">
            <summary>
            Converts a Jagged Array (array of arrays) to an IntPtr.
            The array can read and/or written in unmanaged dll.
            Internal memory managements expects to release the
            resourses after using. Simply make a variable GCHandel[] h
            without initalisation and pass to the function. After using 
            simply call ReleaseHandels(h).
            </summary>
            <param name="arr">2d Jagged Array</param>
            <param name="handles">Handle</param>
            <returns>IntPtr, like Point**</returns>
        </member>
        <member name="M:openCV.cvtools.Convert1DArrToPtr(System.Byte[],System.Runtime.InteropServices.GCHandle@)">
            <summary>
            Converts a one dimensional array to an IntPtr.
            The array can read and/or written in unmanaged dll.
            Internal memory management expects to release the
            resourses after using. Simply make a variable GCHandel[] h
            without initalisation and pass to the function. After using call
            the pointer simply call ReleaseHandels(h).
            </summary>
            <param name="arr">1d Array</param>
            <param name="handle">Handle</param>
            <returns>IntPtr, like byte*</returns>
        </member>
        <member name="M:openCV.cvtools.Convert1DArrToPtr(System.Int32[],System.Runtime.InteropServices.GCHandle@)">
            <summary>
            Converts a one dimensional array to an IntPtr.
            The array can read and/or written in unmanaged dll.
            Internal memory management expects to release the
            resourses after using. Simply make a variable GCHandel[] h
            without initalisation and pass to the function. After using call
            the pointer simply call ReleaseHandels(h).
            </summary>
            <param name="arr">1d Array</param>
            <param name="handle">Handle</param>
            <returns>IntPtr, like int*</returns>
        </member>
        <member name="M:openCV.cvtools.Convert1DArrToPtr(System.Single[],System.Runtime.InteropServices.GCHandle@)">
            <summary>
            Converts a one dimensional array to an IntPtr.
            The array can read and/or written in unmanaged dll.
            Internal memory management expects to release the
            resourses after using. Simply make a variable GCHandel[] h
            without initalisation and pass to the function. After using call
            the pointer simply call ReleaseHandels(h).
            </summary>
            <param name="arr">1d Array</param>
            <param name="handle">Handle</param>
            <returns>IntPtr, like float*</returns>
        </member>
        <member name="M:openCV.cvtools.Convert1DArrToPtr(System.Double[],System.Runtime.InteropServices.GCHandle@)">
            <summary>
            Converts a one dimensional array to an IntPtr.
            The array can read and/or written in unmanaged dll.
            Internal memory management expects to release the
            resourses after using. Simply make a variable GCHandel[] h
            without initalisation and pass to the function. After using call
            the pointer simply call ReleaseHandels(h).
            </summary>
            <param name="arr">1d Array</param>
            <param name="handle">Handle</param>
            <returns>IntPtr, like double*</returns>
        </member>
        <member name="M:openCV.cvtools.Convert1DArrToPtr(openCV.CvPoint2D32f[],System.Runtime.InteropServices.GCHandle@)">
            <summary>
            Converts a one dimensional array to an IntPtr.
            The array can read and/or written in unmanaged dll.
            Internal memory management expects to release the
            resourses after using. Simply make a variable GCHandel[] h
            without initalisation and pass to the function. After using call
            the pointer simply call ReleaseHandels(h).
            </summary>
            <param name="arr">1d Array</param>
            <param name="handle">Handle</param>
            <returns>IntPtr, like double*</returns>
        </member>
        <member name="M:openCV.cvtools.Convert1DArrToPtr(openCV.CvPoint[],System.Runtime.InteropServices.GCHandle@)">
            <summary>
            Converts a one dimensional array to an IntPtr.
            The array can read and/or written in unmanaged dll.
            Internal memory management expects to release the
            resourses after using. Simply make a variable GCHandel[] h
            without initalisation and pass to the function. After using call
            the pointer simply call ReleaseHandels(h).
            </summary>
            <param name="arr">1d Array</param>
            <param name="handle">Handle</param>
            <returns>IntPtr, like double*</returns>
        </member>
        <member name="M:openCV.cvtools.ConvertStructureToPtr(System.Object,System.Runtime.InteropServices.GCHandle@)">
            <summary>
            Return a Pointer to an object eg. structure
            </summary>
            <param name="structure">typeof(object)</param>
            <param name="handle">handle</param>
            <returns>Pointer to object</returns>
        </member>
        <member name="M:openCV.cvtools.ConvertPtrToStructure(System.IntPtr,System.Type)">
            <summary>
            Return the Object from Pointer (must be casted to Structure)
            </summary>
            <param name="p">The pointer</param>
            <param name="typeOfStructure">typeof(object)</param>
            <returns>the object</returns>
        </member>
        <member name="M:openCV.cvtools.ConvertPtrToArray(System.IntPtr,System.Byte[])">
            <summary>
            Converts byte Pointer to Array.
            The Array must be preallocated by desired size.
            </summary>
            <param name="data">Pointer to data</param>
            <param name="arr">Resulting array</param>
        </member>
        <member name="M:openCV.cvtools.ConvertPtrToArray(System.IntPtr,System.Single[])">
            <summary>
            Converts float Pointer to Array.
            The Array must be preallocated by desired size.
            </summary>
            <param name="data">Pointer to data</param>
            <param name="arr">Resulting array</param>
        </member>
        <member name="M:openCV.cvtools.ConvertPtrToArray(System.IntPtr,System.Double[])">
            <summary>
            Converts double Pointer to Array.
            The Array must be preallocated by desired size.
            </summary>
            <param name="data">Pointer to data</param>
            <param name="arr">Resulting array</param>
        </member>
        <member name="M:openCV.cvtools.ConvertPtrToArray(System.IntPtr,System.Int32[])">
            <summary>
            Converts int Pointer to Array.
            The Array must be preallocated by desired size.
            </summary>
            <param name="data">Pointer to data</param>
            <param name="arr">Resulting array</param>
        </member>
        <member name="M:openCV.cvtools.ConvertPtrTo2DArray(System.IntPtr,System.Double[][])">
            <summary>
            Convert IntPtr to 2D Array
            Array must be allocated with desired size
            </summary>
            <param name="ptr">Pointer to Data</param>
            <param name="arr">Array</param>
        </member>
        <member name="M:openCV.cvtools.ConvertPtrTo2DArray(System.IntPtr,System.Single[][])">
            <summary>
            Convert IntPtr to 2D Array
            Array must be allocated with desired size
            </summary>
            <param name="ptr">Pointer to Data</param>
            <param name="arr">Array</param>
        </member>
        <member name="M:openCV.cvtools.ConvertPtrTo2DArray(System.IntPtr,System.Int32[][])">
            <summary>
            Convert IntPtr to 2D Array
            Array must be allocated with desired size
            </summary>
            <param name="ptr">Pointer to Data</param>
            <param name="arr">Array</param>
        </member>
        <member name="M:openCV.cvtools.ConvertPtrTo2DArray(System.IntPtr,System.Byte[][])">
            <summary>
            Convert IntPtr to 2D Array
            Array must be allocated with desired size
            </summary>
            <param name="ptr">Pointer to Data</param>
            <param name="arr">Array</param>
        </member>
        <member name="M:openCV.cvtools.ReleaseHandels(System.Runtime.InteropServices.GCHandle[])">
            <summary>
            Release the used handle(s)
            </summary>
            <param name="h">array of handle(s) given by Convert functions</param>
        </member>
        <member name="M:openCV.cvtools.ReleaseHandel(System.Runtime.InteropServices.GCHandle)">
            <summary>
            Release the used handle
            </summary>
            <param name="h">Handle to be released</param>
        </member>
    </members>
</doc>
